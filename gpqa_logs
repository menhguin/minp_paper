"Name","cli_configs.batch_size","cli_configs.batch_sizes","cli_configs.bootstrap_iters","cli_configs.device","cli_configs.gen_kwargs.do_sample","cli_configs.gen_kwargs.min_p","cli_configs.gen_kwargs.temperature","cli_configs.gen_kwargs.top_p","cli_configs.limit","cli_configs.model","cli_configs.model_args","task_configs.gpqa_main_cot_zeroshot.dataset_name","task_configs.gpqa_main_cot_zeroshot.dataset_path","task_configs.gpqa_main_cot_zeroshot.doc_to_target","task_configs.gpqa_main_cot_zeroshot.doc_to_text","task_configs.gpqa_main_cot_zeroshot.fewshot_delimiter","task_configs.gpqa_main_cot_zeroshot.filter_list","task_configs.gpqa_main_cot_zeroshot.generation_kwargs.do_sample","task_configs.gpqa_main_cot_zeroshot.generation_kwargs.min_p","task_configs.gpqa_main_cot_zeroshot.generation_kwargs.temperature","task_configs.gpqa_main_cot_zeroshot.generation_kwargs.top_p","task_configs.gpqa_main_cot_zeroshot.generation_kwargs.until","task_configs.gpqa_main_cot_zeroshot.group","task_configs.gpqa_main_cot_zeroshot.metadata.version","task_configs.gpqa_main_cot_zeroshot.metric_list","task_configs.gpqa_main_cot_zeroshot.num_fewshot","task_configs.gpqa_main_cot_zeroshot.output_type","task_configs.gpqa_main_cot_zeroshot.process_docs","task_configs.gpqa_main_cot_zeroshot.repeats","task_configs.gpqa_main_cot_zeroshot.should_decontaminate","task_configs.gpqa_main_cot_zeroshot.target_delimiter","task_configs.gpqa_main_cot_zeroshot.task","task_configs.gpqa_main_cot_zeroshot.training_split","task_configs.gpqa_main_cot_zeroshot.validation_split","task_configs.gsm8k_cot.dataset_name","task_configs.gsm8k_cot.dataset_path","task_configs.gsm8k_cot.doc_to_target","task_configs.gsm8k_cot.doc_to_text","task_configs.gsm8k_cot.fewshot_delimiter","task_configs.gsm8k_cot.filter_list","task_configs.gsm8k_cot.generation_kwargs.do_sample","task_configs.gsm8k_cot.generation_kwargs.min_p","task_configs.gsm8k_cot.generation_kwargs.temperature","task_configs.gsm8k_cot.generation_kwargs.top_p","task_configs.gsm8k_cot.generation_kwargs.until","task_configs.gsm8k_cot.group","task_configs.gsm8k_cot.metadata.num_fewshot","task_configs.gsm8k_cot.metadata.version","task_configs.gsm8k_cot.metric_list","task_configs.gsm8k_cot.num_fewshot","task_configs.gsm8k_cot.output_type","task_configs.gsm8k_cot.repeats","task_configs.gsm8k_cot.should_decontaminate","task_configs.gsm8k_cot.target_delimiter","task_configs.gsm8k_cot.task","task_configs.gsm8k_cot.test_split","task_configs.gsm8k_cot_self_consistency.dataset_name","task_configs.gsm8k_cot_self_consistency.dataset_path","task_configs.gsm8k_cot_self_consistency.doc_to_target","task_configs.gsm8k_cot_self_consistency.doc_to_text","task_configs.gsm8k_cot_self_consistency.fewshot_delimiter","task_configs.gsm8k_cot_self_consistency.filter_list","task_configs.gsm8k_cot_self_consistency.generation_kwargs.do_sample","task_configs.gsm8k_cot_self_consistency.generation_kwargs.min_p","task_configs.gsm8k_cot_self_consistency.generation_kwargs.temperature","task_configs.gsm8k_cot_self_consistency.generation_kwargs.top_p","task_configs.gsm8k_cot_self_consistency.generation_kwargs.until","task_configs.gsm8k_cot_self_consistency.group","task_configs.gsm8k_cot_self_consistency.metadata.version","task_configs.gsm8k_cot_self_consistency.metric_list","task_configs.gsm8k_cot_self_consistency.num_fewshot","task_configs.gsm8k_cot_self_consistency.output_type","task_configs.gsm8k_cot_self_consistency.repeats","task_configs.gsm8k_cot_self_consistency.should_decontaminate","task_configs.gsm8k_cot_self_consistency.target_delimiter","task_configs.gsm8k_cot_self_consistency.task","task_configs.gsm8k_cot_self_consistency.test_split","cli_configs.fewshot_seed","cli_configs.numpy_seed","cli_configs.random_seed","cli_configs.torch_seed","task_configs.gpqa_main_cot_n_shot.dataset_name","task_configs.gpqa_main_cot_n_shot.dataset_path","task_configs.gpqa_main_cot_n_shot.doc_to_target","task_configs.gpqa_main_cot_n_shot.doc_to_text","task_configs.gpqa_main_cot_n_shot.fewshot_delimiter","task_configs.gpqa_main_cot_n_shot.filter_list","task_configs.gpqa_main_cot_n_shot.generation_kwargs.do_sample","task_configs.gpqa_main_cot_n_shot.generation_kwargs.min_p","task_configs.gpqa_main_cot_n_shot.generation_kwargs.temperature","task_configs.gpqa_main_cot_n_shot.generation_kwargs.top_p","task_configs.gpqa_main_cot_n_shot.generation_kwargs.until","task_configs.gpqa_main_cot_n_shot.group","task_configs.gpqa_main_cot_n_shot.metadata.version","task_configs.gpqa_main_cot_n_shot.metric_list","task_configs.gpqa_main_cot_n_shot.num_fewshot","task_configs.gpqa_main_cot_n_shot.output_type","task_configs.gpqa_main_cot_n_shot.process_docs","task_configs.gpqa_main_cot_n_shot.repeats","task_configs.gpqa_main_cot_n_shot.should_decontaminate","task_configs.gpqa_main_cot_n_shot.target_delimiter","task_configs.gpqa_main_cot_n_shot.task","task_configs.gpqa_main_cot_n_shot.training_split","task_configs.gpqa_main_cot_n_shot.validation_split","task_configs.gpqa_main_generative_n_shot.dataset_name","task_configs.gpqa_main_generative_n_shot.dataset_path","task_configs.gpqa_main_generative_n_shot.doc_to_target","task_configs.gpqa_main_generative_n_shot.doc_to_text","task_configs.gpqa_main_generative_n_shot.fewshot_delimiter","task_configs.gpqa_main_generative_n_shot.filter_list","task_configs.gpqa_main_generative_n_shot.generation_kwargs.do_sample","task_configs.gpqa_main_generative_n_shot.generation_kwargs.min_p","task_configs.gpqa_main_generative_n_shot.generation_kwargs.temperature","task_configs.gpqa_main_generative_n_shot.generation_kwargs.top_p","task_configs.gpqa_main_generative_n_shot.generation_kwargs.until","task_configs.gpqa_main_generative_n_shot.group","task_configs.gpqa_main_generative_n_shot.metadata.version","task_configs.gpqa_main_generative_n_shot.metric_list","task_configs.gpqa_main_generative_n_shot.num_fewshot","task_configs.gpqa_main_generative_n_shot.output_type","task_configs.gpqa_main_generative_n_shot.process_docs","task_configs.gpqa_main_generative_n_shot.repeats","task_configs.gpqa_main_generative_n_shot.should_decontaminate","task_configs.gpqa_main_generative_n_shot.target_delimiter","task_configs.gpqa_main_generative_n_shot.task","task_configs.gpqa_main_generative_n_shot.training_split","task_configs.gpqa_main_generative_n_shot.validation_split","artiface_name","original_config.cli_configs.batch_size","original_config.cli_configs.batch_sizes","original_config.cli_configs.bootstrap_iters","original_config.cli_configs.device","original_config.cli_configs.fewshot_seed","original_config.cli_configs.gen_kwargs.do_sample","original_config.cli_configs.gen_kwargs.min_p","original_config.cli_configs.gen_kwargs.temperature","original_config.cli_configs.gen_kwargs.top_p","original_config.cli_configs.limit","original_config.cli_configs.model","original_config.cli_configs.model_args","original_config.cli_configs.numpy_seed","original_config.cli_configs.random_seed","original_config.cli_configs.torch_seed","original_config.task_configs.gsm8k_cot_self_consistency.dataset_name","original_config.task_configs.gsm8k_cot_self_consistency.dataset_path","original_config.task_configs.gsm8k_cot_self_consistency.doc_to_target","original_config.task_configs.gsm8k_cot_self_consistency.doc_to_text","original_config.task_configs.gsm8k_cot_self_consistency.fewshot_config.sampler","original_config.task_configs.gsm8k_cot_self_consistency.fewshot_config.samples","original_config.task_configs.gsm8k_cot_self_consistency.fewshot_delimiter","original_config.task_configs.gsm8k_cot_self_consistency.filter_list","original_config.task_configs.gsm8k_cot_self_consistency.generation_kwargs.do_sample","original_config.task_configs.gsm8k_cot_self_consistency.generation_kwargs.min_p","original_config.task_configs.gsm8k_cot_self_consistency.generation_kwargs.temperature","original_config.task_configs.gsm8k_cot_self_consistency.generation_kwargs.top_p","original_config.task_configs.gsm8k_cot_self_consistency.generation_kwargs.until","original_config.task_configs.gsm8k_cot_self_consistency.group","original_config.task_configs.gsm8k_cot_self_consistency.metadata.version","original_config.task_configs.gsm8k_cot_self_consistency.metric_list","original_config.task_configs.gsm8k_cot_self_consistency.num_fewshot","original_config.task_configs.gsm8k_cot_self_consistency.output_type","original_config.task_configs.gsm8k_cot_self_consistency.repeats","original_config.task_configs.gsm8k_cot_self_consistency.should_decontaminate","original_config.task_configs.gsm8k_cot_self_consistency.target_delimiter","original_config.task_configs.gsm8k_cot_self_consistency.task","original_config.task_configs.gsm8k_cot_self_consistency.test_split","original_run","task_configs.gsm8k_cot_self_consistency.fewshot_config.sampler","task_configs.gsm8k_cot_self_consistency.fewshot_config.samples","Runtime","Hostname","Notes","State","User","gpqa_main_cot_zeroshot/alias","gpqa_main_cot_zeroshot/exact_match,flexible-extract","gpqa_main_cot_zeroshot/exact_match,strict-match","gpqa_main_cot_zeroshot/exact_match_stderr,flexible-extract","gpqa_main_cot_zeroshot/exact_match_stderr,strict-match","gsm8k_cot/alias","gsm8k_cot/exact_match,flexible-extract","gsm8k_cot/exact_match,strict-match","gsm8k_cot/exact_match_stderr,flexible-extract","gsm8k_cot/exact_match_stderr,strict-match","gsm8k_cot_self_consistency/alias","gsm8k_cot_self_consistency/exact_match,maj@64","gsm8k_cot_self_consistency/exact_match,maj@8","gsm8k_cot_self_consistency/exact_match,score-first","gsm8k_cot_self_consistency/exact_match_stderr,maj@64","gsm8k_cot_self_consistency/exact_match_stderr,maj@8","gsm8k_cot_self_consistency/exact_match_stderr,score-first","Tags","gpqa_main_cot_n_shot/alias","gpqa_main_cot_n_shot/exact_match,flexible-extract","gpqa_main_cot_n_shot/exact_match,strict-match","gpqa_main_cot_n_shot/exact_match_stderr,flexible-extract","gpqa_main_cot_n_shot/exact_match_stderr,strict-match","gpqa_main_generative_n_shot/alias","gpqa_main_generative_n_shot/exact_match,flexible-extract","gpqa_main_generative_n_shot/exact_match,strict-match","gpqa_main_generative_n_shot/exact_match_stderr,flexible-extract","gpqa_main_generative_n_shot/exact_match_stderr,strict-match"
"GPQA,min_p=0.05,top_p=1,temperature=5,vibrant-bee-54","auto","[]","100000","cuda","true","0.05","5","1","","vllm","pretrained=mistralai/Mistral-7B-v0.1,dtype=auto","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","1234","1234","0","1234","","","","","","","","","","","","","","","","","","","","","","","","gpqa_main","Idavidrein/gpqa","answer","Question: {{Question}}
Choices:
(A) {{choice1}}
(B) {{choice2}}
(C) {{choice3}}
(D) {{choice4}}
Answer:","

","[{""name"":""strict-match"",""filter"":[{""regex_pattern"":""(?<=The answer is )(.*)(?=.)"",""function"":""regex""},{""function"":""take_first""}]},{""name"":""flexible-extract"",""filter"":[{""function"":""multi_choice_regex"",""ignore_case"":true,""group_select"":-1,""regex_pattern"":""(\\([A-Z]\\))"",""ignore_punctuation"":true},{""function"":""take_first""}]}]","true","0.05","5","1","[""</s>"",""Question:"",""<|im_end|>""]","gpqa","1","[{""metric"":""exact_match"",""aggregation"":""mean"",""ignore_case"":true,""higher_is_better"":true,""ignore_punctuation"":true}]","5","generate_until","def process_docs(dataset: datasets.Dataset) -> datasets.Dataset:
    def _process_doc(doc):
        choices = [
            preprocess(doc[""Incorrect Answer 1""]),
            preprocess(doc[""Incorrect Answer 2""]),
            preprocess(doc[""Incorrect Answer 3""]),
            preprocess(doc[""Correct Answer""]),
        ]

        random.shuffle(choices)
        correct_answer_index = choices.index(preprocess(doc[""Correct Answer""]))

        out_doc = {
            ""choice1"": choices[0],
            ""choice2"": choices[1],
            ""choice3"": choices[2],
            ""choice4"": choices[3],
            ""choices"": [choices[0], choices[1], choices[2], choices[3]],
            ""answer"": f""({chr(65 + correct_answer_index)})"",
        }
        return out_doc

    return dataset.map(_process_doc)
","1","false"," ","gpqa_main_generative_n_shot","train","train","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","176","508c65793bbe","-","finished","","","","","","","","","","","","","","","","","","","gpqa_generative_n_shot","","","","","","gpqa_main_generative_n_shot","0.008928571428571428","0","0.0044492796694263065","0"
"GPQA,min_p=0.05,top_p=1,temperature=4,winter-cloud-53","auto","[]","100000","cuda","true","0.05","4","1","","vllm","pretrained=mistralai/Mistral-7B-v0.1,dtype=auto","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","1234","1234","0","1234","","","","","","","","","","","","","","","","","","","","","","","","gpqa_main","Idavidrein/gpqa","answer","Question: {{Question}}
Choices:
(A) {{choice1}}
(B) {{choice2}}
(C) {{choice3}}
(D) {{choice4}}
Answer:","

","[{""name"":""strict-match"",""filter"":[{""function"":""regex"",""regex_pattern"":""(?<=The answer is )(.*)(?=.)""},{""function"":""take_first""}]},{""name"":""flexible-extract"",""filter"":[{""function"":""multi_choice_regex"",""ignore_case"":true,""group_select"":-1,""regex_pattern"":""(\\([A-Z]\\))"",""ignore_punctuation"":true},{""function"":""take_first""}]}]","true","0.05","4","1","[""</s>"",""Question:"",""<|im_end|>""]","gpqa","1","[{""metric"":""exact_match"",""aggregation"":""mean"",""ignore_case"":true,""higher_is_better"":true,""ignore_punctuation"":true}]","5","generate_until","def process_docs(dataset: datasets.Dataset) -> datasets.Dataset:
    def _process_doc(doc):
        choices = [
            preprocess(doc[""Incorrect Answer 1""]),
            preprocess(doc[""Incorrect Answer 2""]),
            preprocess(doc[""Incorrect Answer 3""]),
            preprocess(doc[""Correct Answer""]),
        ]

        random.shuffle(choices)
        correct_answer_index = choices.index(preprocess(doc[""Correct Answer""]))

        out_doc = {
            ""choice1"": choices[0],
            ""choice2"": choices[1],
            ""choice3"": choices[2],
            ""choice4"": choices[3],
            ""choices"": [choices[0], choices[1], choices[2], choices[3]],
            ""answer"": f""({chr(65 + correct_answer_index)})"",
        }
        return out_doc

    return dataset.map(_process_doc)
","1","false"," ","gpqa_main_generative_n_shot","train","train","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","176","508c65793bbe","-","finished","","","","","","","","","","","","","","","","","","","gpqa_generative_n_shot","","","","","","gpqa_main_generative_n_shot","0.05357142857142857","0","0.010650175725330209","0"
"GPQA,min_p=0.05,top_p=1,temperature=3,youthful-forest-52","auto","[]","100000","cuda","true","0.05","3","1","","vllm","pretrained=mistralai/Mistral-7B-v0.1,dtype=auto","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","1234","1234","0","1234","","","","","","","","","","","","","","","","","","","","","","","","gpqa_main","Idavidrein/gpqa","answer","Question: {{Question}}
Choices:
(A) {{choice1}}
(B) {{choice2}}
(C) {{choice3}}
(D) {{choice4}}
Answer:","

","[{""filter"":[{""function"":""regex"",""regex_pattern"":""(?<=The answer is )(.*)(?=.)""},{""function"":""take_first""}],""name"":""strict-match""},{""name"":""flexible-extract"",""filter"":[{""regex_pattern"":""(\\([A-Z]\\))"",""ignore_punctuation"":true,""function"":""multi_choice_regex"",""ignore_case"":true,""group_select"":-1},{""function"":""take_first""}]}]","true","0.05","3","1","[""</s>"",""Question:"",""<|im_end|>""]","gpqa","1","[{""metric"":""exact_match"",""aggregation"":""mean"",""ignore_case"":true,""higher_is_better"":true,""ignore_punctuation"":true}]","5","generate_until","def process_docs(dataset: datasets.Dataset) -> datasets.Dataset:
    def _process_doc(doc):
        choices = [
            preprocess(doc[""Incorrect Answer 1""]),
            preprocess(doc[""Incorrect Answer 2""]),
            preprocess(doc[""Incorrect Answer 3""]),
            preprocess(doc[""Correct Answer""]),
        ]

        random.shuffle(choices)
        correct_answer_index = choices.index(preprocess(doc[""Correct Answer""]))

        out_doc = {
            ""choice1"": choices[0],
            ""choice2"": choices[1],
            ""choice3"": choices[2],
            ""choice4"": choices[3],
            ""choices"": [choices[0], choices[1], choices[2], choices[3]],
            ""answer"": f""({chr(65 + correct_answer_index)})"",
        }
        return out_doc

    return dataset.map(_process_doc)
","1","false"," ","gpqa_main_generative_n_shot","train","train","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","162","508c65793bbe","-","finished","","","","","","","","","","","","","","","","","","","gpqa_generative_n_shot","","","","","","gpqa_main_generative_n_shot","0.13169642857142858","0","0.015994439698901245","0"
"GPQA,min_p=0.05,top_p=1,temperature=2,solar-fog-51","auto","[]","100000","cuda","true","0.05","2","1","","vllm","pretrained=mistralai/Mistral-7B-v0.1,dtype=auto","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","1234","1234","0","1234","","","","","","","","","","","","","","","","","","","","","","","","gpqa_main","Idavidrein/gpqa","answer","Question: {{Question}}
Choices:
(A) {{choice1}}
(B) {{choice2}}
(C) {{choice3}}
(D) {{choice4}}
Answer:","

","[{""name"":""strict-match"",""filter"":[{""function"":""regex"",""regex_pattern"":""(?<=The answer is )(.*)(?=.)""},{""function"":""take_first""}]},{""name"":""flexible-extract"",""filter"":[{""function"":""multi_choice_regex"",""ignore_case"":true,""group_select"":-1,""regex_pattern"":""(\\([A-Z]\\))"",""ignore_punctuation"":true},{""function"":""take_first""}]}]","true","0.05","2","1","[""</s>"",""Question:"",""<|im_end|>""]","gpqa","1","[{""metric"":""exact_match"",""aggregation"":""mean"",""ignore_case"":true,""higher_is_better"":true,""ignore_punctuation"":true}]","5","generate_until","def process_docs(dataset: datasets.Dataset) -> datasets.Dataset:
    def _process_doc(doc):
        choices = [
            preprocess(doc[""Incorrect Answer 1""]),
            preprocess(doc[""Incorrect Answer 2""]),
            preprocess(doc[""Incorrect Answer 3""]),
            preprocess(doc[""Correct Answer""]),
        ]

        random.shuffle(choices)
        correct_answer_index = choices.index(preprocess(doc[""Correct Answer""]))

        out_doc = {
            ""choice1"": choices[0],
            ""choice2"": choices[1],
            ""choice3"": choices[2],
            ""choice4"": choices[3],
            ""choices"": [choices[0], choices[1], choices[2], choices[3]],
            ""answer"": f""({chr(65 + correct_answer_index)})"",
        }
        return out_doc

    return dataset.map(_process_doc)
","1","false"," ","gpqa_main_generative_n_shot","train","train","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","120","508c65793bbe","-","finished","","","","","","","","","","","","","","","","","","","gpqa_generative_n_shot","","","","","","gpqa_main_generative_n_shot","0.26339285714285715","0","0.020833690016578595","0"
"GPQA,min_p=0.05,top_p=1,temperature=1,vibrant-oath-50","auto","[]","100000","cuda","true","0.05","1","1","","vllm","pretrained=mistralai/Mistral-7B-v0.1,dtype=auto","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","1234","1234","0","1234","","","","","","","","","","","","","","","","","","","","","","","","gpqa_main","Idavidrein/gpqa","answer","Question: {{Question}}
Choices:
(A) {{choice1}}
(B) {{choice2}}
(C) {{choice3}}
(D) {{choice4}}
Answer:","

","[{""name"":""strict-match"",""filter"":[{""function"":""regex"",""regex_pattern"":""(?<=The answer is )(.*)(?=.)""},{""function"":""take_first""}]},{""name"":""flexible-extract"",""filter"":[{""function"":""multi_choice_regex"",""ignore_case"":true,""group_select"":-1,""regex_pattern"":""(\\([A-Z]\\))"",""ignore_punctuation"":true},{""function"":""take_first""}]}]","true","0.05","1","1","[""</s>"",""Question:"",""<|im_end|>""]","gpqa","1","[{""metric"":""exact_match"",""aggregation"":""mean"",""ignore_case"":true,""higher_is_better"":true,""ignore_punctuation"":true}]","5","generate_until","def process_docs(dataset: datasets.Dataset) -> datasets.Dataset:
    def _process_doc(doc):
        choices = [
            preprocess(doc[""Incorrect Answer 1""]),
            preprocess(doc[""Incorrect Answer 2""]),
            preprocess(doc[""Incorrect Answer 3""]),
            preprocess(doc[""Correct Answer""]),
        ]

        random.shuffle(choices)
        correct_answer_index = choices.index(preprocess(doc[""Correct Answer""]))

        out_doc = {
            ""choice1"": choices[0],
            ""choice2"": choices[1],
            ""choice3"": choices[2],
            ""choice4"": choices[3],
            ""choices"": [choices[0], choices[1], choices[2], choices[3]],
            ""answer"": f""({chr(65 + correct_answer_index)})"",
        }
        return out_doc

    return dataset.map(_process_doc)
","1","false"," ","gpqa_main_generative_n_shot","train","train","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","147","508c65793bbe","-","finished","","","","","","","","","","","","","","","","","","","gpqa_generative_n_shot","","","","","","gpqa_main_generative_n_shot","0.28348214285714285","0","0.021316828987262157","0"
"GPQA,min_p=0,top_p=0.7,temperature=3,gallant-haze-48","auto","[]","100000","cuda","true","0","3","0.7","","vllm","pretrained=mistralai/Mistral-7B-v0.1,dtype=auto","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","1234","1234","0","1234","","","","","","","","","","","","","","","","","","","","","","","","gpqa_main","Idavidrein/gpqa","answer","Question: {{Question}}
Choices:
(A) {{choice1}}
(B) {{choice2}}
(C) {{choice3}}
(D) {{choice4}}
Answer:","

","[{""name"":""strict-match"",""filter"":[{""function"":""regex"",""regex_pattern"":""(?<=The answer is )(.*)(?=.)""},{""function"":""take_first""}]},{""name"":""flexible-extract"",""filter"":[{""ignore_punctuation"":true,""function"":""multi_choice_regex"",""ignore_case"":true,""group_select"":-1,""regex_pattern"":""(\\([A-Z]\\))""},{""function"":""take_first""}]}]","true","0","3","0.7","[""</s>"",""Question:"",""<|im_end|>""]","gpqa","1","[{""metric"":""exact_match"",""aggregation"":""mean"",""ignore_case"":true,""higher_is_better"":true,""ignore_punctuation"":true}]","5","generate_until","def process_docs(dataset: datasets.Dataset) -> datasets.Dataset:
    def _process_doc(doc):
        choices = [
            preprocess(doc[""Incorrect Answer 1""]),
            preprocess(doc[""Incorrect Answer 2""]),
            preprocess(doc[""Incorrect Answer 3""]),
            preprocess(doc[""Correct Answer""]),
        ]

        random.shuffle(choices)
        correct_answer_index = choices.index(preprocess(doc[""Correct Answer""]))

        out_doc = {
            ""choice1"": choices[0],
            ""choice2"": choices[1],
            ""choice3"": choices[2],
            ""choice4"": choices[3],
            ""choices"": [choices[0], choices[1], choices[2], choices[3]],
            ""answer"": f""({chr(65 + correct_answer_index)})"",
        }
        return out_doc

    return dataset.map(_process_doc)
","1","false"," ","gpqa_main_generative_n_shot","train","train","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","163","070bcecbc68d","-","finished","","","","","","","","","","","","","","","","","","","gpqa_generative_n_shot","","","","","","gpqa_main_generative_n_shot","0.008928571428571428","0","0.0044492796694263065","0"
"GPQA,min_p=0,top_p=0.7,temperature=2,peach-surf-47","auto","[]","100000","cuda","true","0","2","0.7","","vllm","pretrained=mistralai/Mistral-7B-v0.1,dtype=auto","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","1234","1234","0","1234","","","","","","","","","","","","","","","","","","","","","","","","gpqa_main","Idavidrein/gpqa","answer","Question: {{Question}}
Choices:
(A) {{choice1}}
(B) {{choice2}}
(C) {{choice3}}
(D) {{choice4}}
Answer:","

","[{""name"":""strict-match"",""filter"":[{""function"":""regex"",""regex_pattern"":""(?<=The answer is )(.*)(?=.)""},{""function"":""take_first""}]},{""name"":""flexible-extract"",""filter"":[{""ignore_case"":true,""group_select"":-1,""regex_pattern"":""(\\([A-Z]\\))"",""ignore_punctuation"":true,""function"":""multi_choice_regex""},{""function"":""take_first""}]}]","true","0","2","0.7","[""</s>"",""Question:"",""<|im_end|>""]","gpqa","1","[{""ignore_case"":true,""higher_is_better"":true,""ignore_punctuation"":true,""metric"":""exact_match"",""aggregation"":""mean""}]","5","generate_until","def process_docs(dataset: datasets.Dataset) -> datasets.Dataset:
    def _process_doc(doc):
        choices = [
            preprocess(doc[""Incorrect Answer 1""]),
            preprocess(doc[""Incorrect Answer 2""]),
            preprocess(doc[""Incorrect Answer 3""]),
            preprocess(doc[""Correct Answer""]),
        ]

        random.shuffle(choices)
        correct_answer_index = choices.index(preprocess(doc[""Correct Answer""]))

        out_doc = {
            ""choice1"": choices[0],
            ""choice2"": choices[1],
            ""choice3"": choices[2],
            ""choice4"": choices[3],
            ""choices"": [choices[0], choices[1], choices[2], choices[3]],
            ""answer"": f""({chr(65 + correct_answer_index)})"",
        }
        return out_doc

    return dataset.map(_process_doc)
","1","false"," ","gpqa_main_generative_n_shot","train","train","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","157","070bcecbc68d","-","finished","","","","","","","","","","","","","","","","","","","gpqa_generative_n_shot","","","","","","gpqa_main_generative_n_shot","0.10714285714285714","0","0.01462914143783998","0"
"GPQA,min_p=0,top_p=0.7,temperature=1,sweet-water-46","auto","[]","100000","cuda","true","0","1","0.7","","vllm","pretrained=mistralai/Mistral-7B-v0.1,dtype=auto","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","1234","1234","0","1234","","","","","","","","","","","","","","","","","","","","","","","","gpqa_main","Idavidrein/gpqa","answer","Question: {{Question}}
Choices:
(A) {{choice1}}
(B) {{choice2}}
(C) {{choice3}}
(D) {{choice4}}
Answer:","

","[{""name"":""strict-match"",""filter"":[{""function"":""regex"",""regex_pattern"":""(?<=The answer is )(.*)(?=.)""},{""function"":""take_first""}]},{""filter"":[{""regex_pattern"":""(\\([A-Z]\\))"",""ignore_punctuation"":true,""function"":""multi_choice_regex"",""ignore_case"":true,""group_select"":-1},{""function"":""take_first""}],""name"":""flexible-extract""}]","true","0","1","0.7","[""</s>"",""Question:"",""<|im_end|>""]","gpqa","1","[{""ignore_punctuation"":true,""metric"":""exact_match"",""aggregation"":""mean"",""ignore_case"":true,""higher_is_better"":true}]","5","generate_until","def process_docs(dataset: datasets.Dataset) -> datasets.Dataset:
    def _process_doc(doc):
        choices = [
            preprocess(doc[""Incorrect Answer 1""]),
            preprocess(doc[""Incorrect Answer 2""]),
            preprocess(doc[""Incorrect Answer 3""]),
            preprocess(doc[""Correct Answer""]),
        ]

        random.shuffle(choices)
        correct_answer_index = choices.index(preprocess(doc[""Correct Answer""]))

        out_doc = {
            ""choice1"": choices[0],
            ""choice2"": choices[1],
            ""choice3"": choices[2],
            ""choice4"": choices[3],
            ""choices"": [choices[0], choices[1], choices[2], choices[3]],
            ""answer"": f""({chr(65 + correct_answer_index)})"",
        }
        return out_doc

    return dataset.map(_process_doc)
","1","false"," ","gpqa_main_generative_n_shot","train","train","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","91","070bcecbc68d","-","finished","","","","","","","","","","","","","","","","","","","gpqa_generative_n_shot","","","","","","gpqa_main_generative_n_shot","0.28125","0","0.02126578568827395","0"
"GPQA,min_p=0.3,top_p=1,temperature=5,colorful-night-45","auto","[]","100000","cuda","true","0.3","5","1","","vllm","pretrained=mistralai/Mistral-7B-v0.1,dtype=auto","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","1234","1234","0","1234","","","","","","","","","","","","","","","","","","","","","","","","gpqa_main","Idavidrein/gpqa","answer","Question: {{Question}}
Choices:
(A) {{choice1}}
(B) {{choice2}}
(C) {{choice3}}
(D) {{choice4}}
Answer:","

","[{""filter"":[{""function"":""regex"",""regex_pattern"":""(?<=The answer is )(.*)(?=.)""},{""function"":""take_first""}],""name"":""strict-match""},{""filter"":[{""function"":""multi_choice_regex"",""ignore_case"":true,""group_select"":-1,""regex_pattern"":""(\\([A-Z]\\))"",""ignore_punctuation"":true},{""function"":""take_first""}],""name"":""flexible-extract""}]","true","0.3","5","1","[""</s>"",""Question:"",""<|im_end|>""]","gpqa","1","[{""ignore_case"":true,""higher_is_better"":true,""ignore_punctuation"":true,""metric"":""exact_match"",""aggregation"":""mean""}]","5","generate_until","def process_docs(dataset: datasets.Dataset) -> datasets.Dataset:
    def _process_doc(doc):
        choices = [
            preprocess(doc[""Incorrect Answer 1""]),
            preprocess(doc[""Incorrect Answer 2""]),
            preprocess(doc[""Incorrect Answer 3""]),
            preprocess(doc[""Correct Answer""]),
        ]

        random.shuffle(choices)
        correct_answer_index = choices.index(preprocess(doc[""Correct Answer""]))

        out_doc = {
            ""choice1"": choices[0],
            ""choice2"": choices[1],
            ""choice3"": choices[2],
            ""choice4"": choices[3],
            ""choices"": [choices[0], choices[1], choices[2], choices[3]],
            ""answer"": f""({chr(65 + correct_answer_index)})"",
        }
        return out_doc

    return dataset.map(_process_doc)
","1","false"," ","gpqa_main_generative_n_shot","train","train","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","111","070bcecbc68d","-","finished","","","","","","","","","","","","","","","","","","","gpqa_generative_n_shot","","","","","","gpqa_main_generative_n_shot","0.21205357142857145","0","0.019333807037683448","0"
"GPQA,min_p=0.3,top_p=1,temperature=4,morning-cosmos-44","auto","[]","100000","cuda","true","0.3","4","1","","vllm","pretrained=mistralai/Mistral-7B-v0.1,dtype=auto","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","1234","1234","0","1234","","","","","","","","","","","","","","","","","","","","","","","","gpqa_main","Idavidrein/gpqa","answer","Question: {{Question}}
Choices:
(A) {{choice1}}
(B) {{choice2}}
(C) {{choice3}}
(D) {{choice4}}
Answer:","

","[{""name"":""strict-match"",""filter"":[{""function"":""regex"",""regex_pattern"":""(?<=The answer is )(.*)(?=.)""},{""function"":""take_first""}]},{""filter"":[{""ignore_case"":true,""group_select"":-1,""regex_pattern"":""(\\([A-Z]\\))"",""ignore_punctuation"":true,""function"":""multi_choice_regex""},{""function"":""take_first""}],""name"":""flexible-extract""}]","true","0.3","4","1","[""</s>"",""Question:"",""<|im_end|>""]","gpqa","1","[{""metric"":""exact_match"",""aggregation"":""mean"",""ignore_case"":true,""higher_is_better"":true,""ignore_punctuation"":true}]","5","generate_until","def process_docs(dataset: datasets.Dataset) -> datasets.Dataset:
    def _process_doc(doc):
        choices = [
            preprocess(doc[""Incorrect Answer 1""]),
            preprocess(doc[""Incorrect Answer 2""]),
            preprocess(doc[""Incorrect Answer 3""]),
            preprocess(doc[""Correct Answer""]),
        ]

        random.shuffle(choices)
        correct_answer_index = choices.index(preprocess(doc[""Correct Answer""]))

        out_doc = {
            ""choice1"": choices[0],
            ""choice2"": choices[1],
            ""choice3"": choices[2],
            ""choice4"": choices[3],
            ""choices"": [choices[0], choices[1], choices[2], choices[3]],
            ""answer"": f""({chr(65 + correct_answer_index)})"",
        }
        return out_doc

    return dataset.map(_process_doc)
","1","false"," ","gpqa_main_generative_n_shot","train","train","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","100","070bcecbc68d","-","finished","","","","","","","","","","","","","","","","","","","gpqa_generative_n_shot","","","","","","gpqa_main_generative_n_shot","0.25892857142857145","0","0.02071887932447213","0"
"GPQA,min_p=0.3,top_p=1,temperature=3,fanciful-totem-43","auto","[]","100000","cuda","true","0.3","3","1","","vllm","pretrained=mistralai/Mistral-7B-v0.1,dtype=auto","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","1234","1234","0","1234","","","","","","","","","","","","","","","","","","","","","","","","gpqa_main","Idavidrein/gpqa","answer","Question: {{Question}}
Choices:
(A) {{choice1}}
(B) {{choice2}}
(C) {{choice3}}
(D) {{choice4}}
Answer:","

","[{""filter"":[{""function"":""regex"",""regex_pattern"":""(?<=The answer is )(.*)(?=.)""},{""function"":""take_first""}],""name"":""strict-match""},{""name"":""flexible-extract"",""filter"":[{""ignore_case"":true,""group_select"":-1,""regex_pattern"":""(\\([A-Z]\\))"",""ignore_punctuation"":true,""function"":""multi_choice_regex""},{""function"":""take_first""}]}]","true","0.3","3","1","[""</s>"",""Question:"",""<|im_end|>""]","gpqa","1","[{""metric"":""exact_match"",""aggregation"":""mean"",""ignore_case"":true,""higher_is_better"":true,""ignore_punctuation"":true}]","5","generate_until","def process_docs(dataset: datasets.Dataset) -> datasets.Dataset:
    def _process_doc(doc):
        choices = [
            preprocess(doc[""Incorrect Answer 1""]),
            preprocess(doc[""Incorrect Answer 2""]),
            preprocess(doc[""Incorrect Answer 3""]),
            preprocess(doc[""Correct Answer""]),
        ]

        random.shuffle(choices)
        correct_answer_index = choices.index(preprocess(doc[""Correct Answer""]))

        out_doc = {
            ""choice1"": choices[0],
            ""choice2"": choices[1],
            ""choice3"": choices[2],
            ""choice4"": choices[3],
            ""choices"": [choices[0], choices[1], choices[2], choices[3]],
            ""answer"": f""({chr(65 + correct_answer_index)})"",
        }
        return out_doc

    return dataset.map(_process_doc)
","1","false"," ","gpqa_main_generative_n_shot","train","train","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","95","070bcecbc68d","-","finished","","","","","","","","","","","","","","","","","","","gpqa_generative_n_shot","","","","","","gpqa_main_generative_n_shot","0.29910714285714285","0","0.021656359273376977","0"
"GPQA,min_p=0.3,top_p=1,temperature=2,crimson-field-42","auto","[]","100000","cuda","true","0.3","2","1","","vllm","pretrained=mistralai/Mistral-7B-v0.1,dtype=auto","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","1234","1234","0","1234","","","","","","","","","","","","","","","","","","","","","","","","gpqa_main","Idavidrein/gpqa","answer","Question: {{Question}}
Choices:
(A) {{choice1}}
(B) {{choice2}}
(C) {{choice3}}
(D) {{choice4}}
Answer:","

","[{""name"":""strict-match"",""filter"":[{""function"":""regex"",""regex_pattern"":""(?<=The answer is )(.*)(?=.)""},{""function"":""take_first""}]},{""name"":""flexible-extract"",""filter"":[{""group_select"":-1,""regex_pattern"":""(\\([A-Z]\\))"",""ignore_punctuation"":true,""function"":""multi_choice_regex"",""ignore_case"":true},{""function"":""take_first""}]}]","true","0.3","2","1","[""</s>"",""Question:"",""<|im_end|>""]","gpqa","1","[{""metric"":""exact_match"",""aggregation"":""mean"",""ignore_case"":true,""higher_is_better"":true,""ignore_punctuation"":true}]","5","generate_until","def process_docs(dataset: datasets.Dataset) -> datasets.Dataset:
    def _process_doc(doc):
        choices = [
            preprocess(doc[""Incorrect Answer 1""]),
            preprocess(doc[""Incorrect Answer 2""]),
            preprocess(doc[""Incorrect Answer 3""]),
            preprocess(doc[""Correct Answer""]),
        ]

        random.shuffle(choices)
        correct_answer_index = choices.index(preprocess(doc[""Correct Answer""]))

        out_doc = {
            ""choice1"": choices[0],
            ""choice2"": choices[1],
            ""choice3"": choices[2],
            ""choice4"": choices[3],
            ""choices"": [choices[0], choices[1], choices[2], choices[3]],
            ""answer"": f""({chr(65 + correct_answer_index)})"",
        }
        return out_doc

    return dataset.map(_process_doc)
","1","false"," ","gpqa_main_generative_n_shot","train","train","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","90","070bcecbc68d","-","finished","","","","","","","","","","","","","","","","","","","gpqa_generative_n_shot","","","","","","gpqa_main_generative_n_shot","0.31026785714285715","0","0.021880380205954647","0"
"GPQA,min_p=0.3,top_p=1,temperature=1,avid-cosmos-41","auto","[]","100000","cuda","true","0.3","1","1","","vllm","pretrained=mistralai/Mistral-7B-v0.1,dtype=auto","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","1234","1234","0","1234","","","","","","","","","","","","","","","","","","","","","","","","gpqa_main","Idavidrein/gpqa","answer","Question: {{Question}}
Choices:
(A) {{choice1}}
(B) {{choice2}}
(C) {{choice3}}
(D) {{choice4}}
Answer:","

","[{""name"":""strict-match"",""filter"":[{""function"":""regex"",""regex_pattern"":""(?<=The answer is )(.*)(?=.)""},{""function"":""take_first""}]},{""name"":""flexible-extract"",""filter"":[{""group_select"":-1,""regex_pattern"":""(\\([A-Z]\\))"",""ignore_punctuation"":true,""function"":""multi_choice_regex"",""ignore_case"":true},{""function"":""take_first""}]}]","true","0.3","1","1","[""</s>"",""Question:"",""<|im_end|>""]","gpqa","1","[{""aggregation"":""mean"",""ignore_case"":true,""higher_is_better"":true,""ignore_punctuation"":true,""metric"":""exact_match""}]","5","generate_until","def process_docs(dataset: datasets.Dataset) -> datasets.Dataset:
    def _process_doc(doc):
        choices = [
            preprocess(doc[""Incorrect Answer 1""]),
            preprocess(doc[""Incorrect Answer 2""]),
            preprocess(doc[""Incorrect Answer 3""]),
            preprocess(doc[""Correct Answer""]),
        ]

        random.shuffle(choices)
        correct_answer_index = choices.index(preprocess(doc[""Correct Answer""]))

        out_doc = {
            ""choice1"": choices[0],
            ""choice2"": choices[1],
            ""choice3"": choices[2],
            ""choice4"": choices[3],
            ""choices"": [choices[0], choices[1], choices[2], choices[3]],
            ""answer"": f""({chr(65 + correct_answer_index)})"",
        }
        return out_doc

    return dataset.map(_process_doc)
","1","false"," ","gpqa_main_generative_n_shot","train","train","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","88","070bcecbc68d","-","finished","","","","","","","","","","","","","","","","","","","gpqa_generative_n_shot","","","","","","gpqa_main_generative_n_shot","0.30580357142857145","0","0.021792582688756976","0"
"GPQA,min_p=0.3,top_p=1,temperature=0,wise-rain-40","auto","[]","100000","cuda","true","0.3","0","1","","vllm","pretrained=mistralai/Mistral-7B-v0.1,dtype=auto","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","1234","1234","0","1234","","","","","","","","","","","","","","","","","","","","","","","","gpqa_main","Idavidrein/gpqa","answer","Question: {{Question}}
Choices:
(A) {{choice1}}
(B) {{choice2}}
(C) {{choice3}}
(D) {{choice4}}
Answer:","

","[{""name"":""strict-match"",""filter"":[{""regex_pattern"":""(?<=The answer is )(.*)(?=.)"",""function"":""regex""},{""function"":""take_first""}]},{""filter"":[{""function"":""multi_choice_regex"",""ignore_case"":true,""group_select"":-1,""regex_pattern"":""(\\([A-Z]\\))"",""ignore_punctuation"":true},{""function"":""take_first""}],""name"":""flexible-extract""}]","true","0.3","0","1","[""</s>"",""Question:"",""<|im_end|>""]","gpqa","1","[{""metric"":""exact_match"",""aggregation"":""mean"",""ignore_case"":true,""higher_is_better"":true,""ignore_punctuation"":true}]","5","generate_until","def process_docs(dataset: datasets.Dataset) -> datasets.Dataset:
    def _process_doc(doc):
        choices = [
            preprocess(doc[""Incorrect Answer 1""]),
            preprocess(doc[""Incorrect Answer 2""]),
            preprocess(doc[""Incorrect Answer 3""]),
            preprocess(doc[""Correct Answer""]),
        ]

        random.shuffle(choices)
        correct_answer_index = choices.index(preprocess(doc[""Correct Answer""]))

        out_doc = {
            ""choice1"": choices[0],
            ""choice2"": choices[1],
            ""choice3"": choices[2],
            ""choice4"": choices[3],
            ""choices"": [choices[0], choices[1], choices[2], choices[3]],
            ""answer"": f""({chr(65 + correct_answer_index)})"",
        }
        return out_doc

    return dataset.map(_process_doc)
","1","false"," ","gpqa_main_generative_n_shot","train","train","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","89","070bcecbc68d","-","finished","","","","","","","","","","","","","","","","","","","gpqa_generative_n_shot","","","","","","gpqa_main_generative_n_shot","0.28348214285714285","0","0.021316828987262133","0"
"GPQA,min_p=0,top_p=0.8,temperature=3,decent-morning-39","auto","[]","100000","cuda","true","0","3","0.8","","vllm","pretrained=mistralai/Mistral-7B-v0.1,dtype=auto","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","1234","1234","0","1234","","","","","","","","","","","","","","","","","","","","","","","","gpqa_main","Idavidrein/gpqa","answer","Question: {{Question}}
Choices:
(A) {{choice1}}
(B) {{choice2}}
(C) {{choice3}}
(D) {{choice4}}
Answer:","

","[{""name"":""strict-match"",""filter"":[{""function"":""regex"",""regex_pattern"":""(?<=The answer is )(.*)(?=.)""},{""function"":""take_first""}]},{""name"":""flexible-extract"",""filter"":[{""ignore_case"":true,""group_select"":-1,""regex_pattern"":""(\\([A-Z]\\))"",""ignore_punctuation"":true,""function"":""multi_choice_regex""},{""function"":""take_first""}]}]","true","0","3","0.8","[""</s>"",""Question:"",""<|im_end|>""]","gpqa","1","[{""aggregation"":""mean"",""ignore_case"":true,""higher_is_better"":true,""ignore_punctuation"":true,""metric"":""exact_match""}]","5","generate_until","def process_docs(dataset: datasets.Dataset) -> datasets.Dataset:
    def _process_doc(doc):
        choices = [
            preprocess(doc[""Incorrect Answer 1""]),
            preprocess(doc[""Incorrect Answer 2""]),
            preprocess(doc[""Incorrect Answer 3""]),
            preprocess(doc[""Correct Answer""]),
        ]

        random.shuffle(choices)
        correct_answer_index = choices.index(preprocess(doc[""Correct Answer""]))

        out_doc = {
            ""choice1"": choices[0],
            ""choice2"": choices[1],
            ""choice3"": choices[2],
            ""choice4"": choices[3],
            ""choices"": [choices[0], choices[1], choices[2], choices[3]],
            ""answer"": f""({chr(65 + correct_answer_index)})"",
        }
        return out_doc

    return dataset.map(_process_doc)
","1","false"," ","gpqa_main_generative_n_shot","train","train","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","160","070bcecbc68d","-","finished","","","","","","","","","","","","","","","","","","","gpqa_generative_n_shot","","","","","","gpqa_main_generative_n_shot","0.006696428571428571","0","0.003857525958834122","0"
"GPQA,min_p=0,top_p=0.8,temperature=2,volcanic-universe-38","auto","[]","100000","cuda","true","0","2","0.8","","vllm","pretrained=mistralai/Mistral-7B-v0.1,dtype=auto","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","1234","1234","0","1234","","","","","","","","","","","","","","","","","","","","","","","","gpqa_main","Idavidrein/gpqa","answer","Question: {{Question}}
Choices:
(A) {{choice1}}
(B) {{choice2}}
(C) {{choice3}}
(D) {{choice4}}
Answer:","

","[{""filter"":[{""function"":""regex"",""regex_pattern"":""(?<=The answer is )(.*)(?=.)""},{""function"":""take_first""}],""name"":""strict-match""},{""name"":""flexible-extract"",""filter"":[{""function"":""multi_choice_regex"",""ignore_case"":true,""group_select"":-1,""regex_pattern"":""(\\([A-Z]\\))"",""ignore_punctuation"":true},{""function"":""take_first""}]}]","true","0","2","0.8","[""</s>"",""Question:"",""<|im_end|>""]","gpqa","1","[{""ignore_punctuation"":true,""metric"":""exact_match"",""aggregation"":""mean"",""ignore_case"":true,""higher_is_better"":true}]","5","generate_until","def process_docs(dataset: datasets.Dataset) -> datasets.Dataset:
    def _process_doc(doc):
        choices = [
            preprocess(doc[""Incorrect Answer 1""]),
            preprocess(doc[""Incorrect Answer 2""]),
            preprocess(doc[""Incorrect Answer 3""]),
            preprocess(doc[""Correct Answer""]),
        ]

        random.shuffle(choices)
        correct_answer_index = choices.index(preprocess(doc[""Correct Answer""]))

        out_doc = {
            ""choice1"": choices[0],
            ""choice2"": choices[1],
            ""choice3"": choices[2],
            ""choice4"": choices[3],
            ""choices"": [choices[0], choices[1], choices[2], choices[3]],
            ""answer"": f""({chr(65 + correct_answer_index)})"",
        }
        return out_doc

    return dataset.map(_process_doc)
","1","false"," ","gpqa_main_generative_n_shot","train","train","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","156","070bcecbc68d","-","finished","","","","","","","","","","","","","","","","","","","gpqa_generative_n_shot","","","","","","gpqa_main_generative_n_shot","0.10491071428571427","0","0.014494036134769584","0"
"GPQA,min_p=0,top_p=0.8,temperature=1,fast-planet-36","auto","[]","100000","cuda","true","0","1","0.8","","vllm","pretrained=mistralai/Mistral-7B-v0.1,dtype=auto","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","1234","1234","0","1234","","","","","","","","","","","","","","","","","","","","","","","","gpqa_main","Idavidrein/gpqa","answer","Question: {{Question}}
Choices:
(A) {{choice1}}
(B) {{choice2}}
(C) {{choice3}}
(D) {{choice4}}
Answer:","

","[{""name"":""strict-match"",""filter"":[{""function"":""regex"",""regex_pattern"":""(?<=The answer is )(.*)(?=.)""},{""function"":""take_first""}]},{""name"":""flexible-extract"",""filter"":[{""function"":""multi_choice_regex"",""ignore_case"":true,""group_select"":-1,""regex_pattern"":""(\\([A-Z]\\))"",""ignore_punctuation"":true},{""function"":""take_first""}]}]","true","0","1","0.8","[""</s>"",""Question:"",""<|im_end|>""]","gpqa","1","[{""metric"":""exact_match"",""aggregation"":""mean"",""ignore_case"":true,""higher_is_better"":true,""ignore_punctuation"":true}]","5","generate_until","def process_docs(dataset: datasets.Dataset) -> datasets.Dataset:
    def _process_doc(doc):
        choices = [
            preprocess(doc[""Incorrect Answer 1""]),
            preprocess(doc[""Incorrect Answer 2""]),
            preprocess(doc[""Incorrect Answer 3""]),
            preprocess(doc[""Correct Answer""]),
        ]

        random.shuffle(choices)
        correct_answer_index = choices.index(preprocess(doc[""Correct Answer""]))

        out_doc = {
            ""choice1"": choices[0],
            ""choice2"": choices[1],
            ""choice3"": choices[2],
            ""choice4"": choices[3],
            ""choices"": [choices[0], choices[1], choices[2], choices[3]],
            ""answer"": f""({chr(65 + correct_answer_index)})"",
        }
        return out_doc

    return dataset.map(_process_doc)
","1","false"," ","gpqa_main_generative_n_shot","train","train","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","89","070bcecbc68d","-","finished","","","","","","","","","","","","","","","","","","","gpqa_generative_n_shot","","","","","","gpqa_main_generative_n_shot","0.2924107142857143","0","0.02151461125992853","0"
"GPQA,min_p=0.2,top_p=1,temperature=5,magic-glitter-35","auto","[]","100000","cuda","true","0.2","5","1","","vllm","pretrained=mistralai/Mistral-7B-v0.1,dtype=auto","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","1234","1234","0","1234","","","","","","","","","","","","","","","","","","","","","","","","gpqa_main","Idavidrein/gpqa","answer","Question: {{Question}}
Choices:
(A) {{choice1}}
(B) {{choice2}}
(C) {{choice3}}
(D) {{choice4}}
Answer:","

","[{""name"":""strict-match"",""filter"":[{""function"":""regex"",""regex_pattern"":""(?<=The answer is )(.*)(?=.)""},{""function"":""take_first""}]},{""name"":""flexible-extract"",""filter"":[{""ignore_punctuation"":true,""function"":""multi_choice_regex"",""ignore_case"":true,""group_select"":-1,""regex_pattern"":""(\\([A-Z]\\))""},{""function"":""take_first""}]}]","true","0.2","5","1","[""</s>"",""Question:"",""<|im_end|>""]","gpqa","1","[{""ignore_case"":true,""higher_is_better"":true,""ignore_punctuation"":true,""metric"":""exact_match"",""aggregation"":""mean""}]","5","generate_until","def process_docs(dataset: datasets.Dataset) -> datasets.Dataset:
    def _process_doc(doc):
        choices = [
            preprocess(doc[""Incorrect Answer 1""]),
            preprocess(doc[""Incorrect Answer 2""]),
            preprocess(doc[""Incorrect Answer 3""]),
            preprocess(doc[""Correct Answer""]),
        ]

        random.shuffle(choices)
        correct_answer_index = choices.index(preprocess(doc[""Correct Answer""]))

        out_doc = {
            ""choice1"": choices[0],
            ""choice2"": choices[1],
            ""choice3"": choices[2],
            ""choice4"": choices[3],
            ""choices"": [choices[0], choices[1], choices[2], choices[3]],
            ""answer"": f""({chr(65 + correct_answer_index)})"",
        }
        return out_doc

    return dataset.map(_process_doc)
","1","false"," ","gpqa_main_generative_n_shot","train","train","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","144","070bcecbc68d","-","finished","","","","","","","","","","","","","","","","","","","gpqa_generative_n_shot","","","","","","gpqa_main_generative_n_shot","0.14732142857142858","0","0.01676377694831728","0"
"GPQA,min_p=0.2,top_p=1,temperature=4,smart-puddle-34","auto","[]","100000","cuda","true","0.2","4","1","","vllm","pretrained=mistralai/Mistral-7B-v0.1,dtype=auto","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","1234","1234","0","1234","","","","","","","","","","","","","","","","","","","","","","","","gpqa_main","Idavidrein/gpqa","answer","Question: {{Question}}
Choices:
(A) {{choice1}}
(B) {{choice2}}
(C) {{choice3}}
(D) {{choice4}}
Answer:","

","[{""name"":""strict-match"",""filter"":[{""function"":""regex"",""regex_pattern"":""(?<=The answer is )(.*)(?=.)""},{""function"":""take_first""}]},{""name"":""flexible-extract"",""filter"":[{""function"":""multi_choice_regex"",""ignore_case"":true,""group_select"":-1,""regex_pattern"":""(\\([A-Z]\\))"",""ignore_punctuation"":true},{""function"":""take_first""}]}]","true","0.2","4","1","[""</s>"",""Question:"",""<|im_end|>""]","gpqa","1","[{""aggregation"":""mean"",""ignore_case"":true,""higher_is_better"":true,""ignore_punctuation"":true,""metric"":""exact_match""}]","5","generate_until","def process_docs(dataset: datasets.Dataset) -> datasets.Dataset:
    def _process_doc(doc):
        choices = [
            preprocess(doc[""Incorrect Answer 1""]),
            preprocess(doc[""Incorrect Answer 2""]),
            preprocess(doc[""Incorrect Answer 3""]),
            preprocess(doc[""Correct Answer""]),
        ]

        random.shuffle(choices)
        correct_answer_index = choices.index(preprocess(doc[""Correct Answer""]))

        out_doc = {
            ""choice1"": choices[0],
            ""choice2"": choices[1],
            ""choice3"": choices[2],
            ""choice4"": choices[3],
            ""choices"": [choices[0], choices[1], choices[2], choices[3]],
            ""answer"": f""({chr(65 + correct_answer_index)})"",
        }
        return out_doc

    return dataset.map(_process_doc)
","1","false"," ","gpqa_main_generative_n_shot","train","train","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","116","070bcecbc68d","-","finished","","","","","","","","","","","","","","","","","","","gpqa_generative_n_shot","","","","","","gpqa_main_generative_n_shot","0.21205357142857145","0","0.01933380703768344","0"
"GPQA,min_p=0.2,top_p=1,temperature=3,genial-snow-33","auto","[]","100000","cuda","true","0.2","3","1","","vllm","pretrained=mistralai/Mistral-7B-v0.1,dtype=auto","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","1234","1234","0","1234","","","","","","","","","","","","","","","","","","","","","","","","gpqa_main","Idavidrein/gpqa","answer","Question: {{Question}}
Choices:
(A) {{choice1}}
(B) {{choice2}}
(C) {{choice3}}
(D) {{choice4}}
Answer:","

","[{""name"":""strict-match"",""filter"":[{""function"":""regex"",""regex_pattern"":""(?<=The answer is )(.*)(?=.)""},{""function"":""take_first""}]},{""name"":""flexible-extract"",""filter"":[{""regex_pattern"":""(\\([A-Z]\\))"",""ignore_punctuation"":true,""function"":""multi_choice_regex"",""ignore_case"":true,""group_select"":-1},{""function"":""take_first""}]}]","true","0.2","3","1","[""</s>"",""Question:"",""<|im_end|>""]","gpqa","1","[{""metric"":""exact_match"",""aggregation"":""mean"",""ignore_case"":true,""higher_is_better"":true,""ignore_punctuation"":true}]","5","generate_until","def process_docs(dataset: datasets.Dataset) -> datasets.Dataset:
    def _process_doc(doc):
        choices = [
            preprocess(doc[""Incorrect Answer 1""]),
            preprocess(doc[""Incorrect Answer 2""]),
            preprocess(doc[""Incorrect Answer 3""]),
            preprocess(doc[""Correct Answer""]),
        ]

        random.shuffle(choices)
        correct_answer_index = choices.index(preprocess(doc[""Correct Answer""]))

        out_doc = {
            ""choice1"": choices[0],
            ""choice2"": choices[1],
            ""choice3"": choices[2],
            ""choice4"": choices[3],
            ""choices"": [choices[0], choices[1], choices[2], choices[3]],
            ""answer"": f""({chr(65 + correct_answer_index)})"",
        }
        return out_doc

    return dataset.map(_process_doc)
","1","false"," ","gpqa_main_generative_n_shot","train","train","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","99","070bcecbc68d","-","finished","","","","","","","","","","","","","","","","","","","gpqa_generative_n_shot","","","","","","gpqa_main_generative_n_shot","0.2857142857142857","0","0.021367228699836035","0"
"GPQA,min_p=0.2,top_p=1,temperature=2,stellar-cherry-32","auto","[]","100000","cuda","true","0.2","2","1","","vllm","pretrained=mistralai/Mistral-7B-v0.1,dtype=auto","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","1234","1234","0","1234","","","","","","","","","","","","","","","","","","","","","","","","gpqa_main","Idavidrein/gpqa","answer","Question: {{Question}}
Choices:
(A) {{choice1}}
(B) {{choice2}}
(C) {{choice3}}
(D) {{choice4}}
Answer:","

","[{""filter"":[{""function"":""regex"",""regex_pattern"":""(?<=The answer is )(.*)(?=.)""},{""function"":""take_first""}],""name"":""strict-match""},{""name"":""flexible-extract"",""filter"":[{""ignore_punctuation"":true,""function"":""multi_choice_regex"",""ignore_case"":true,""group_select"":-1,""regex_pattern"":""(\\([A-Z]\\))""},{""function"":""take_first""}]}]","true","0.2","2","1","[""</s>"",""Question:"",""<|im_end|>""]","gpqa","1","[{""ignore_punctuation"":true,""metric"":""exact_match"",""aggregation"":""mean"",""ignore_case"":true,""higher_is_better"":true}]","5","generate_until","def process_docs(dataset: datasets.Dataset) -> datasets.Dataset:
    def _process_doc(doc):
        choices = [
            preprocess(doc[""Incorrect Answer 1""]),
            preprocess(doc[""Incorrect Answer 2""]),
            preprocess(doc[""Incorrect Answer 3""]),
            preprocess(doc[""Correct Answer""]),
        ]

        random.shuffle(choices)
        correct_answer_index = choices.index(preprocess(doc[""Correct Answer""]))

        out_doc = {
            ""choice1"": choices[0],
            ""choice2"": choices[1],
            ""choice3"": choices[2],
            ""choice4"": choices[3],
            ""choices"": [choices[0], choices[1], choices[2], choices[3]],
            ""answer"": f""({chr(65 + correct_answer_index)})"",
        }
        return out_doc

    return dataset.map(_process_doc)
","1","false"," ","gpqa_main_generative_n_shot","train","train","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","93","070bcecbc68d","-","finished","","","","","","","","","","","","","","","","","","","gpqa_generative_n_shot","","","","","","gpqa_main_generative_n_shot","0.2924107142857143","0","0.021514611259928533","0"
"GPQA,min_p=0.2,top_p=1,temperature=0,expert-dew-31","auto","[]","100000","cuda","true","0.2","0","1","","vllm","pretrained=mistralai/Mistral-7B-v0.1,dtype=auto","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","1234","1234","0","1234","","","","","","","","","","","","","","","","","","","","","","","","gpqa_main","Idavidrein/gpqa","answer","Question: {{Question}}
Choices:
(A) {{choice1}}
(B) {{choice2}}
(C) {{choice3}}
(D) {{choice4}}
Answer:","

","[{""name"":""strict-match"",""filter"":[{""function"":""regex"",""regex_pattern"":""(?<=The answer is )(.*)(?=.)""},{""function"":""take_first""}]},{""name"":""flexible-extract"",""filter"":[{""ignore_case"":true,""group_select"":-1,""regex_pattern"":""(\\([A-Z]\\))"",""ignore_punctuation"":true,""function"":""multi_choice_regex""},{""function"":""take_first""}]}]","true","0.2","0","1","[""</s>"",""Question:"",""<|im_end|>""]","gpqa","1","[{""higher_is_better"":true,""ignore_punctuation"":true,""metric"":""exact_match"",""aggregation"":""mean"",""ignore_case"":true}]","5","generate_until","def process_docs(dataset: datasets.Dataset) -> datasets.Dataset:
    def _process_doc(doc):
        choices = [
            preprocess(doc[""Incorrect Answer 1""]),
            preprocess(doc[""Incorrect Answer 2""]),
            preprocess(doc[""Incorrect Answer 3""]),
            preprocess(doc[""Correct Answer""]),
        ]

        random.shuffle(choices)
        correct_answer_index = choices.index(preprocess(doc[""Correct Answer""]))

        out_doc = {
            ""choice1"": choices[0],
            ""choice2"": choices[1],
            ""choice3"": choices[2],
            ""choice4"": choices[3],
            ""choices"": [choices[0], choices[1], choices[2], choices[3]],
            ""answer"": f""({chr(65 + correct_answer_index)})"",
        }
        return out_doc

    return dataset.map(_process_doc)
","1","false"," ","gpqa_main_generative_n_shot","train","train","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","88","070bcecbc68d","-","finished","","","","","","","","","","","","","","","","","","","gpqa_generative_n_shot","","","","","","gpqa_main_generative_n_shot","0.28348214285714285","0","0.021316828987262133","0"
"GPQA,min_p=0.2,top_p=1,temperature=1,elated-darkness-30","auto","[]","100000","cuda","true","0.2","1","1","","vllm","pretrained=mistralai/Mistral-7B-v0.1,dtype=auto","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","1234","1234","0","1234","","","","","","","","","","","","","","","","","","","","","","","","gpqa_main","Idavidrein/gpqa","answer","Question: {{Question}}
Choices:
(A) {{choice1}}
(B) {{choice2}}
(C) {{choice3}}
(D) {{choice4}}
Answer:","

","[{""name"":""strict-match"",""filter"":[{""function"":""regex"",""regex_pattern"":""(?<=The answer is )(.*)(?=.)""},{""function"":""take_first""}]},{""name"":""flexible-extract"",""filter"":[{""ignore_case"":true,""group_select"":-1,""regex_pattern"":""(\\([A-Z]\\))"",""ignore_punctuation"":true,""function"":""multi_choice_regex""},{""function"":""take_first""}]}]","true","0.2","1","1","[""</s>"",""Question:"",""<|im_end|>""]","gpqa","1","[{""aggregation"":""mean"",""ignore_case"":true,""higher_is_better"":true,""ignore_punctuation"":true,""metric"":""exact_match""}]","5","generate_until","def process_docs(dataset: datasets.Dataset) -> datasets.Dataset:
    def _process_doc(doc):
        choices = [
            preprocess(doc[""Incorrect Answer 1""]),
            preprocess(doc[""Incorrect Answer 2""]),
            preprocess(doc[""Incorrect Answer 3""]),
            preprocess(doc[""Correct Answer""]),
        ]

        random.shuffle(choices)
        correct_answer_index = choices.index(preprocess(doc[""Correct Answer""]))

        out_doc = {
            ""choice1"": choices[0],
            ""choice2"": choices[1],
            ""choice3"": choices[2],
            ""choice4"": choices[3],
            ""choices"": [choices[0], choices[1], choices[2], choices[3]],
            ""answer"": f""({chr(65 + correct_answer_index)})"",
        }
        return out_doc

    return dataset.map(_process_doc)
","1","false"," ","gpqa_main_generative_n_shot","train","train","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","89","070bcecbc68d","-","finished","","","","","","","","","","","","","","","","","","","gpqa_generative_n_shot","","","","","","gpqa_main_generative_n_shot","0.30357142857142855","0","0.02174778223291751","0"
"GPQA,min_p=0.05,top_p=1,temperature=0,ethereal-silence-29","auto","[]","100000","cuda","true","0.05","0","1","","vllm","pretrained=mistralai/Mistral-7B-v0.1,dtype=auto","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","1234","1234","0","1234","","","","","","","","","","","","","","","","","","","","","","","","gpqa_main","Idavidrein/gpqa","answer","Question: {{Question}}
Choices:
(A) {{choice1}}
(B) {{choice2}}
(C) {{choice3}}
(D) {{choice4}}
Answer:","

","[{""name"":""strict-match"",""filter"":[{""function"":""regex"",""regex_pattern"":""(?<=The answer is )(.*)(?=.)""},{""function"":""take_first""}]},{""name"":""flexible-extract"",""filter"":[{""ignore_case"":true,""group_select"":-1,""regex_pattern"":""(\\([A-Z]\\))"",""ignore_punctuation"":true,""function"":""multi_choice_regex""},{""function"":""take_first""}]}]","true","0.05","0","1","[""</s>"",""Question:"",""<|im_end|>""]","gpqa","1","[{""metric"":""exact_match"",""aggregation"":""mean"",""ignore_case"":true,""higher_is_better"":true,""ignore_punctuation"":true}]","5","generate_until","def process_docs(dataset: datasets.Dataset) -> datasets.Dataset:
    def _process_doc(doc):
        choices = [
            preprocess(doc[""Incorrect Answer 1""]),
            preprocess(doc[""Incorrect Answer 2""]),
            preprocess(doc[""Incorrect Answer 3""]),
            preprocess(doc[""Correct Answer""]),
        ]

        random.shuffle(choices)
        correct_answer_index = choices.index(preprocess(doc[""Correct Answer""]))

        out_doc = {
            ""choice1"": choices[0],
            ""choice2"": choices[1],
            ""choice3"": choices[2],
            ""choice4"": choices[3],
            ""choices"": [choices[0], choices[1], choices[2], choices[3]],
            ""answer"": f""({chr(65 + correct_answer_index)})"",
        }
        return out_doc

    return dataset.map(_process_doc)
","1","false"," ","gpqa_main_generative_n_shot","train","train","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","93","070bcecbc68d","-","finished","","","","","","","","","","","","","","","","","","","gpqa_generative_n_shot","","","","","","gpqa_main_generative_n_shot","0.28348214285714285","0","0.021316828987262133","0"
"GPQA,min_p=0,top_p=0.95,temperature=0,hopeful-donkey-28","auto","[]","100000","cuda","true","0","0","0.95","","vllm","pretrained=mistralai/Mistral-7B-v0.1,dtype=auto","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","1234","1234","0","1234","","","","","","","","","","","","","","","","","","","","","","","","gpqa_main","Idavidrein/gpqa","answer","Question: {{Question}}
Choices:
(A) {{choice1}}
(B) {{choice2}}
(C) {{choice3}}
(D) {{choice4}}
Answer:","

","[{""name"":""strict-match"",""filter"":[{""function"":""regex"",""regex_pattern"":""(?<=The answer is )(.*)(?=.)""},{""function"":""take_first""}]},{""name"":""flexible-extract"",""filter"":[{""ignore_case"":true,""group_select"":-1,""regex_pattern"":""(\\([A-Z]\\))"",""ignore_punctuation"":true,""function"":""multi_choice_regex""},{""function"":""take_first""}]}]","true","0","0","0.95","[""</s>"",""Question:"",""<|im_end|>""]","gpqa","1","[{""aggregation"":""mean"",""ignore_case"":true,""higher_is_better"":true,""ignore_punctuation"":true,""metric"":""exact_match""}]","5","generate_until","def process_docs(dataset: datasets.Dataset) -> datasets.Dataset:
    def _process_doc(doc):
        choices = [
            preprocess(doc[""Incorrect Answer 1""]),
            preprocess(doc[""Incorrect Answer 2""]),
            preprocess(doc[""Incorrect Answer 3""]),
            preprocess(doc[""Correct Answer""]),
        ]

        random.shuffle(choices)
        correct_answer_index = choices.index(preprocess(doc[""Correct Answer""]))

        out_doc = {
            ""choice1"": choices[0],
            ""choice2"": choices[1],
            ""choice3"": choices[2],
            ""choice4"": choices[3],
            ""choices"": [choices[0], choices[1], choices[2], choices[3]],
            ""answer"": f""({chr(65 + correct_answer_index)})"",
        }
        return out_doc

    return dataset.map(_process_doc)
","1","false"," ","gpqa_main_generative_n_shot","train","train","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","89","070bcecbc68d","-","finished","","","","","","","","","","","","","","","","","","","gpqa_generative_n_shot","","","","","","gpqa_main_generative_n_shot","0.28348214285714285","0","0.021316828987262133","0"
"GPQA,min_p=0,top_p=0.9,temperature=0,sparkling-haze-27","auto","[]","100000","cuda","true","0","0","0.9","","vllm","pretrained=mistralai/Mistral-7B-v0.1,dtype=auto","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","1234","1234","0","1234","","","","","","","","","","","","","","","","","","","","","","","","gpqa_main","Idavidrein/gpqa","answer","Question: {{Question}}
Choices:
(A) {{choice1}}
(B) {{choice2}}
(C) {{choice3}}
(D) {{choice4}}
Answer:","

","[{""name"":""strict-match"",""filter"":[{""function"":""regex"",""regex_pattern"":""(?<=The answer is )(.*)(?=.)""},{""function"":""take_first""}]},{""name"":""flexible-extract"",""filter"":[{""function"":""multi_choice_regex"",""ignore_case"":true,""group_select"":-1,""regex_pattern"":""(\\([A-Z]\\))"",""ignore_punctuation"":true},{""function"":""take_first""}]}]","true","0","0","0.9","[""</s>"",""Question:"",""<|im_end|>""]","gpqa","1","[{""metric"":""exact_match"",""aggregation"":""mean"",""ignore_case"":true,""higher_is_better"":true,""ignore_punctuation"":true}]","5","generate_until","def process_docs(dataset: datasets.Dataset) -> datasets.Dataset:
    def _process_doc(doc):
        choices = [
            preprocess(doc[""Incorrect Answer 1""]),
            preprocess(doc[""Incorrect Answer 2""]),
            preprocess(doc[""Incorrect Answer 3""]),
            preprocess(doc[""Correct Answer""]),
        ]

        random.shuffle(choices)
        correct_answer_index = choices.index(preprocess(doc[""Correct Answer""]))

        out_doc = {
            ""choice1"": choices[0],
            ""choice2"": choices[1],
            ""choice3"": choices[2],
            ""choice4"": choices[3],
            ""choices"": [choices[0], choices[1], choices[2], choices[3]],
            ""answer"": f""({chr(65 + correct_answer_index)})"",
        }
        return out_doc

    return dataset.map(_process_doc)
","1","false"," ","gpqa_main_generative_n_shot","train","train","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","88","070bcecbc68d","-","finished","","","","","","","","","","","","","","","","","","","gpqa_generative_n_shot","","","","","","gpqa_main_generative_n_shot","0.28348214285714285","0","0.021316828987262133","0"
"GPQA,min_p=0,top_p=1,temperature=0,absurd-morning-26","auto","[]","100000","cuda","true","0","0","1","","vllm","pretrained=mistralai/Mistral-7B-v0.1,dtype=auto","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","1234","1234","0","1234","","","","","","","","","","","","","","","","","","","","","","","","gpqa_main","Idavidrein/gpqa","answer","Question: {{Question}}
Choices:
(A) {{choice1}}
(B) {{choice2}}
(C) {{choice3}}
(D) {{choice4}}
Answer:","

","[{""name"":""strict-match"",""filter"":[{""function"":""regex"",""regex_pattern"":""(?<=The answer is )(.*)(?=.)""},{""function"":""take_first""}]},{""name"":""flexible-extract"",""filter"":[{""function"":""multi_choice_regex"",""ignore_case"":true,""group_select"":-1,""regex_pattern"":""(\\([A-Z]\\))"",""ignore_punctuation"":true},{""function"":""take_first""}]}]","true","0","0","1","[""</s>"",""Question:"",""<|im_end|>""]","gpqa","1","[{""metric"":""exact_match"",""aggregation"":""mean"",""ignore_case"":true,""higher_is_better"":true,""ignore_punctuation"":true}]","5","generate_until","def process_docs(dataset: datasets.Dataset) -> datasets.Dataset:
    def _process_doc(doc):
        choices = [
            preprocess(doc[""Incorrect Answer 1""]),
            preprocess(doc[""Incorrect Answer 2""]),
            preprocess(doc[""Incorrect Answer 3""]),
            preprocess(doc[""Correct Answer""]),
        ]

        random.shuffle(choices)
        correct_answer_index = choices.index(preprocess(doc[""Correct Answer""]))

        out_doc = {
            ""choice1"": choices[0],
            ""choice2"": choices[1],
            ""choice3"": choices[2],
            ""choice4"": choices[3],
            ""choices"": [choices[0], choices[1], choices[2], choices[3]],
            ""answer"": f""({chr(65 + correct_answer_index)})"",
        }
        return out_doc

    return dataset.map(_process_doc)
","1","false"," ","gpqa_main_generative_n_shot","train","train","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","88","070bcecbc68d","-","finished","","","","","","","","","","","","","","","","","","","gpqa_generative_n_shot","","","","","","gpqa_main_generative_n_shot","0.28348214285714285","0","0.021316828987262133","0"
"GPQA,min_p=0,top_p=1,temperature=3,leafy-terrain-25","auto","[]","100000","cuda","true","0","3","1","","vllm","pretrained=mistralai/Mistral-7B-v0.1,dtype=auto","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","1234","1234","0","1234","","","","","","","","","","","","","","","","","","","","","","","","gpqa_main","Idavidrein/gpqa","answer","Question: {{Question}}
Choices:
(A) {{choice1}}
(B) {{choice2}}
(C) {{choice3}}
(D) {{choice4}}
Answer:","

","[{""name"":""strict-match"",""filter"":[{""function"":""regex"",""regex_pattern"":""(?<=The answer is )(.*)(?=.)""},{""function"":""take_first""}]},{""name"":""flexible-extract"",""filter"":[{""function"":""multi_choice_regex"",""ignore_case"":true,""group_select"":-1,""regex_pattern"":""(\\([A-Z]\\))"",""ignore_punctuation"":true},{""function"":""take_first""}]}]","true","0","3","1","[""</s>"",""Question:"",""<|im_end|>""]","gpqa","1","[{""aggregation"":""mean"",""ignore_case"":true,""higher_is_better"":true,""ignore_punctuation"":true,""metric"":""exact_match""}]","5","generate_until","def process_docs(dataset: datasets.Dataset) -> datasets.Dataset:
    def _process_doc(doc):
        choices = [
            preprocess(doc[""Incorrect Answer 1""]),
            preprocess(doc[""Incorrect Answer 2""]),
            preprocess(doc[""Incorrect Answer 3""]),
            preprocess(doc[""Correct Answer""]),
        ]

        random.shuffle(choices)
        correct_answer_index = choices.index(preprocess(doc[""Correct Answer""]))

        out_doc = {
            ""choice1"": choices[0],
            ""choice2"": choices[1],
            ""choice3"": choices[2],
            ""choice4"": choices[3],
            ""choices"": [choices[0], choices[1], choices[2], choices[3]],
            ""answer"": f""({chr(65 + correct_answer_index)})"",
        }
        return out_doc

    return dataset.map(_process_doc)
","1","false"," ","gpqa_main_generative_n_shot","train","train","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","159","070bcecbc68d","-","finished","","","","","","","","","","","","","","","","","","","gpqa_generative_n_shot","","","","","","gpqa_main_generative_n_shot","0.008928571428571428","0","0.004449279669426309","0"
"GPQA,min_p=0,top_p=1,temperature=2,glad-butterfly-24","auto","[]","100000","cuda","true","0","2","1","","vllm","pretrained=mistralai/Mistral-7B-v0.1,dtype=auto","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","1234","1234","0","1234","","","","","","","","","","","","","","","","","","","","","","","","gpqa_main","Idavidrein/gpqa","answer","Question: {{Question}}
Choices:
(A) {{choice1}}
(B) {{choice2}}
(C) {{choice3}}
(D) {{choice4}}
Answer:","

","[{""name"":""strict-match"",""filter"":[{""function"":""regex"",""regex_pattern"":""(?<=The answer is )(.*)(?=.)""},{""function"":""take_first""}]},{""filter"":[{""ignore_punctuation"":true,""function"":""multi_choice_regex"",""ignore_case"":true,""group_select"":-1,""regex_pattern"":""(\\([A-Z]\\))""},{""function"":""take_first""}],""name"":""flexible-extract""}]","true","0","2","1","[""</s>"",""Question:"",""<|im_end|>""]","gpqa","1","[{""aggregation"":""mean"",""ignore_case"":true,""higher_is_better"":true,""ignore_punctuation"":true,""metric"":""exact_match""}]","5","generate_until","def process_docs(dataset: datasets.Dataset) -> datasets.Dataset:
    def _process_doc(doc):
        choices = [
            preprocess(doc[""Incorrect Answer 1""]),
            preprocess(doc[""Incorrect Answer 2""]),
            preprocess(doc[""Incorrect Answer 3""]),
            preprocess(doc[""Correct Answer""]),
        ]

        random.shuffle(choices)
        correct_answer_index = choices.index(preprocess(doc[""Correct Answer""]))

        out_doc = {
            ""choice1"": choices[0],
            ""choice2"": choices[1],
            ""choice3"": choices[2],
            ""choice4"": choices[3],
            ""choices"": [choices[0], choices[1], choices[2], choices[3]],
            ""answer"": f""({chr(65 + correct_answer_index)})"",
        }
        return out_doc

    return dataset.map(_process_doc)
","1","false"," ","gpqa_main_generative_n_shot","train","train","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","154","070bcecbc68d","-","finished","","","","","","","","","","","","","","","","","","","gpqa_generative_n_shot","","","","","","gpqa_main_generative_n_shot","0.05803571428571429","0","0.011058879448664433","0"
"GPQA,min_p=0,top_p=1,temperature=1,fluent-cherry-23","auto","[]","100000","cuda","true","0","1","1","","vllm","pretrained=mistralai/Mistral-7B-v0.1,dtype=auto","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","1234","1234","0","1234","","","","","","","","","","","","","","","","","","","","","","","","gpqa_main","Idavidrein/gpqa","answer","Question: {{Question}}
Choices:
(A) {{choice1}}
(B) {{choice2}}
(C) {{choice3}}
(D) {{choice4}}
Answer:","

","[{""name"":""strict-match"",""filter"":[{""function"":""regex"",""regex_pattern"":""(?<=The answer is )(.*)(?=.)""},{""function"":""take_first""}]},{""name"":""flexible-extract"",""filter"":[{""function"":""multi_choice_regex"",""ignore_case"":true,""group_select"":-1,""regex_pattern"":""(\\([A-Z]\\))"",""ignore_punctuation"":true},{""function"":""take_first""}]}]","true","0","1","1","[""</s>"",""Question:"",""<|im_end|>""]","gpqa","1","[{""aggregation"":""mean"",""ignore_case"":true,""higher_is_better"":true,""ignore_punctuation"":true,""metric"":""exact_match""}]","5","generate_until","def process_docs(dataset: datasets.Dataset) -> datasets.Dataset:
    def _process_doc(doc):
        choices = [
            preprocess(doc[""Incorrect Answer 1""]),
            preprocess(doc[""Incorrect Answer 2""]),
            preprocess(doc[""Incorrect Answer 3""]),
            preprocess(doc[""Correct Answer""]),
        ]

        random.shuffle(choices)
        correct_answer_index = choices.index(preprocess(doc[""Correct Answer""]))

        out_doc = {
            ""choice1"": choices[0],
            ""choice2"": choices[1],
            ""choice3"": choices[2],
            ""choice4"": choices[3],
            ""choices"": [choices[0], choices[1], choices[2], choices[3]],
            ""answer"": f""({chr(65 + correct_answer_index)})"",
        }
        return out_doc

    return dataset.map(_process_doc)
","1","false"," ","gpqa_main_generative_n_shot","train","train","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","99","070bcecbc68d","-","finished","","","","","","","","","","","","","","","","","","","gpqa_generative_n_shot","","","","","","gpqa_main_generative_n_shot","0.22767857142857145","0","0.0198338196436619","0"
"GPQA,min_p=0,top_p=0.95,temperature=3,cosmic-glitter-22","auto","[]","100000","cuda","true","0","3","0.95","","vllm","pretrained=mistralai/Mistral-7B-v0.1,dtype=auto","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","1234","1234","0","1234","","","","","","","","","","","","","","","","","","","","","","","","gpqa_main","Idavidrein/gpqa","answer","Question: {{Question}}
Choices:
(A) {{choice1}}
(B) {{choice2}}
(C) {{choice3}}
(D) {{choice4}}
Answer:","

","[{""name"":""strict-match"",""filter"":[{""function"":""regex"",""regex_pattern"":""(?<=The answer is )(.*)(?=.)""},{""function"":""take_first""}]},{""name"":""flexible-extract"",""filter"":[{""function"":""multi_choice_regex"",""ignore_case"":true,""group_select"":-1,""regex_pattern"":""(\\([A-Z]\\))"",""ignore_punctuation"":true},{""function"":""take_first""}]}]","true","0","3","0.95","[""</s>"",""Question:"",""<|im_end|>""]","gpqa","1","[{""ignore_punctuation"":true,""metric"":""exact_match"",""aggregation"":""mean"",""ignore_case"":true,""higher_is_better"":true}]","5","generate_until","def process_docs(dataset: datasets.Dataset) -> datasets.Dataset:
    def _process_doc(doc):
        choices = [
            preprocess(doc[""Incorrect Answer 1""]),
            preprocess(doc[""Incorrect Answer 2""]),
            preprocess(doc[""Incorrect Answer 3""]),
            preprocess(doc[""Correct Answer""]),
        ]

        random.shuffle(choices)
        correct_answer_index = choices.index(preprocess(doc[""Correct Answer""]))

        out_doc = {
            ""choice1"": choices[0],
            ""choice2"": choices[1],
            ""choice3"": choices[2],
            ""choice4"": choices[3],
            ""choices"": [choices[0], choices[1], choices[2], choices[3]],
            ""answer"": f""({chr(65 + correct_answer_index)})"",
        }
        return out_doc

    return dataset.map(_process_doc)
","1","false"," ","gpqa_main_generative_n_shot","train","train","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","157","070bcecbc68d","-","finished","","","","","","","","","","","","","","","","","","","gpqa_generative_n_shot","","","","","","gpqa_main_generative_n_shot","0.006696428571428571","0","0.0038575259588341207","0"
"GPQA,min_p=0,top_p=0.95,temperature=2,usual-tree-21","auto","[]","100000","cuda","true","0","2","0.95","","vllm","pretrained=mistralai/Mistral-7B-v0.1,dtype=auto","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","1234","1234","0","1234","","","","","","","","","","","","","","","","","","","","","","","","gpqa_main","Idavidrein/gpqa","answer","Question: {{Question}}
Choices:
(A) {{choice1}}
(B) {{choice2}}
(C) {{choice3}}
(D) {{choice4}}
Answer:","

","[{""name"":""strict-match"",""filter"":[{""regex_pattern"":""(?<=The answer is )(.*)(?=.)"",""function"":""regex""},{""function"":""take_first""}]},{""name"":""flexible-extract"",""filter"":[{""ignore_punctuation"":true,""function"":""multi_choice_regex"",""ignore_case"":true,""group_select"":-1,""regex_pattern"":""(\\([A-Z]\\))""},{""function"":""take_first""}]}]","true","0","2","0.95","[""</s>"",""Question:"",""<|im_end|>""]","gpqa","1","[{""aggregation"":""mean"",""ignore_case"":true,""higher_is_better"":true,""ignore_punctuation"":true,""metric"":""exact_match""}]","5","generate_until","def process_docs(dataset: datasets.Dataset) -> datasets.Dataset:
    def _process_doc(doc):
        choices = [
            preprocess(doc[""Incorrect Answer 1""]),
            preprocess(doc[""Incorrect Answer 2""]),
            preprocess(doc[""Incorrect Answer 3""]),
            preprocess(doc[""Correct Answer""]),
        ]

        random.shuffle(choices)
        correct_answer_index = choices.index(preprocess(doc[""Correct Answer""]))

        out_doc = {
            ""choice1"": choices[0],
            ""choice2"": choices[1],
            ""choice3"": choices[2],
            ""choice4"": choices[3],
            ""choices"": [choices[0], choices[1], choices[2], choices[3]],
            ""answer"": f""({chr(65 + correct_answer_index)})"",
        }
        return out_doc

    return dataset.map(_process_doc)
","1","false"," ","gpqa_main_generative_n_shot","train","train","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","156","070bcecbc68d","-","finished","","","","","","","","","","","","","","","","","","","gpqa_generative_n_shot","","","","","","gpqa_main_generative_n_shot","0.07366071428571429","0","0.012355184716888672","0"
"GPQA,min_p=0,top_p=0.95,temperature=1,helpful-breeze-20","auto","[]","100000","cuda","true","0","1","0.95","","vllm","pretrained=mistralai/Mistral-7B-v0.1,dtype=auto","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","1234","1234","0","1234","","","","","","","","","","","","","","","","","","","","","","","","gpqa_main","Idavidrein/gpqa","answer","Question: {{Question}}
Choices:
(A) {{choice1}}
(B) {{choice2}}
(C) {{choice3}}
(D) {{choice4}}
Answer:","

","[{""name"":""strict-match"",""filter"":[{""function"":""regex"",""regex_pattern"":""(?<=The answer is )(.*)(?=.)""},{""function"":""take_first""}]},{""name"":""flexible-extract"",""filter"":[{""group_select"":-1,""regex_pattern"":""(\\([A-Z]\\))"",""ignore_punctuation"":true,""function"":""multi_choice_regex"",""ignore_case"":true},{""function"":""take_first""}]}]","true","0","1","0.95","[""</s>"",""Question:"",""<|im_end|>""]","gpqa","1","[{""higher_is_better"":true,""ignore_punctuation"":true,""metric"":""exact_match"",""aggregation"":""mean"",""ignore_case"":true}]","5","generate_until","def process_docs(dataset: datasets.Dataset) -> datasets.Dataset:
    def _process_doc(doc):
        choices = [
            preprocess(doc[""Incorrect Answer 1""]),
            preprocess(doc[""Incorrect Answer 2""]),
            preprocess(doc[""Incorrect Answer 3""]),
            preprocess(doc[""Correct Answer""]),
        ]

        random.shuffle(choices)
        correct_answer_index = choices.index(preprocess(doc[""Correct Answer""]))

        out_doc = {
            ""choice1"": choices[0],
            ""choice2"": choices[1],
            ""choice3"": choices[2],
            ""choice4"": choices[3],
            ""choices"": [choices[0], choices[1], choices[2], choices[3]],
            ""answer"": f""({chr(65 + correct_answer_index)})"",
        }
        return out_doc

    return dataset.map(_process_doc)
","1","false"," ","gpqa_main_generative_n_shot","train","train","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","95","070bcecbc68d","-","finished","","","","","","","","","","","","","","","","","","","gpqa_generative_n_shot","","","","","","gpqa_main_generative_n_shot","0.2611607142857143","0","0.02077663222303596","0"
"GPQA,min_p=0.1,top_p=1,temperature=5,icy-eon-19","auto","[]","100000","cuda","true","0.1","5","1","","vllm","pretrained=mistralai/Mistral-7B-v0.1,dtype=auto","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","1234","1234","0","1234","","","","","","","","","","","","","","","","","","","","","","","","gpqa_main","Idavidrein/gpqa","answer","Question: {{Question}}
Choices:
(A) {{choice1}}
(B) {{choice2}}
(C) {{choice3}}
(D) {{choice4}}
Answer:","

","[{""name"":""strict-match"",""filter"":[{""function"":""regex"",""regex_pattern"":""(?<=The answer is )(.*)(?=.)""},{""function"":""take_first""}]},{""filter"":[{""function"":""multi_choice_regex"",""ignore_case"":true,""group_select"":-1,""regex_pattern"":""(\\([A-Z]\\))"",""ignore_punctuation"":true},{""function"":""take_first""}],""name"":""flexible-extract""}]","true","0.1","5","1","[""</s>"",""Question:"",""<|im_end|>""]","gpqa","1","[{""higher_is_better"":true,""ignore_punctuation"":true,""metric"":""exact_match"",""aggregation"":""mean"",""ignore_case"":true}]","5","generate_until","def process_docs(dataset: datasets.Dataset) -> datasets.Dataset:
    def _process_doc(doc):
        choices = [
            preprocess(doc[""Incorrect Answer 1""]),
            preprocess(doc[""Incorrect Answer 2""]),
            preprocess(doc[""Incorrect Answer 3""]),
            preprocess(doc[""Correct Answer""]),
        ]

        random.shuffle(choices)
        correct_answer_index = choices.index(preprocess(doc[""Correct Answer""]))

        out_doc = {
            ""choice1"": choices[0],
            ""choice2"": choices[1],
            ""choice3"": choices[2],
            ""choice4"": choices[3],
            ""choices"": [choices[0], choices[1], choices[2], choices[3]],
            ""answer"": f""({chr(65 + correct_answer_index)})"",
        }
        return out_doc

    return dataset.map(_process_doc)
","1","false"," ","gpqa_main_generative_n_shot","train","train","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","157","070bcecbc68d","-","finished","","","","","","","","","","","","","","","","","","","gpqa_generative_n_shot","","","","","","gpqa_main_generative_n_shot","0.029017857142857144","0","0.007939342343352645","0"
"GPQA,min_p=0.1,top_p=1,temperature=4,sparkling-mountain-18","auto","[]","100000","cuda","true","0.1","4","1","","vllm","pretrained=mistralai/Mistral-7B-v0.1,dtype=auto","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","1234","1234","0","1234","","","","","","","","","","","","","","","","","","","","","","","","gpqa_main","Idavidrein/gpqa","answer","Question: {{Question}}
Choices:
(A) {{choice1}}
(B) {{choice2}}
(C) {{choice3}}
(D) {{choice4}}
Answer:","

","[{""name"":""strict-match"",""filter"":[{""function"":""regex"",""regex_pattern"":""(?<=The answer is )(.*)(?=.)""},{""function"":""take_first""}]},{""name"":""flexible-extract"",""filter"":[{""group_select"":-1,""regex_pattern"":""(\\([A-Z]\\))"",""ignore_punctuation"":true,""function"":""multi_choice_regex"",""ignore_case"":true},{""function"":""take_first""}]}]","true","0.1","4","1","[""</s>"",""Question:"",""<|im_end|>""]","gpqa","1","[{""metric"":""exact_match"",""aggregation"":""mean"",""ignore_case"":true,""higher_is_better"":true,""ignore_punctuation"":true}]","5","generate_until","def process_docs(dataset: datasets.Dataset) -> datasets.Dataset:
    def _process_doc(doc):
        choices = [
            preprocess(doc[""Incorrect Answer 1""]),
            preprocess(doc[""Incorrect Answer 2""]),
            preprocess(doc[""Incorrect Answer 3""]),
            preprocess(doc[""Correct Answer""]),
        ]

        random.shuffle(choices)
        correct_answer_index = choices.index(preprocess(doc[""Correct Answer""]))

        out_doc = {
            ""choice1"": choices[0],
            ""choice2"": choices[1],
            ""choice3"": choices[2],
            ""choice4"": choices[3],
            ""choices"": [choices[0], choices[1], choices[2], choices[3]],
            ""answer"": f""({chr(65 + correct_answer_index)})"",
        }
        return out_doc

    return dataset.map(_process_doc)
","1","false"," ","gpqa_main_generative_n_shot","train","train","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","149","070bcecbc68d","-","finished","","","","","","","","","","","","","","","","","","","gpqa_generative_n_shot","","","","","","gpqa_main_generative_n_shot","0.09151785714285714","0","0.013638209498136909","0"
"GPQA,min_p=0,top_p=0.9,temperature=3,young-pine-17","auto","[]","100000","cuda","true","0","3","0.9","","vllm","pretrained=mistralai/Mistral-7B-v0.1,dtype=auto","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","1234","1234","0","1234","","","","","","","","","","","","","","","","","","","","","","","","gpqa_main","Idavidrein/gpqa","answer","Question: {{Question}}
Choices:
(A) {{choice1}}
(B) {{choice2}}
(C) {{choice3}}
(D) {{choice4}}
Answer:","

","[{""name"":""strict-match"",""filter"":[{""function"":""regex"",""regex_pattern"":""(?<=The answer is )(.*)(?=.)""},{""function"":""take_first""}]},{""filter"":[{""group_select"":-1,""regex_pattern"":""(\\([A-Z]\\))"",""ignore_punctuation"":true,""function"":""multi_choice_regex"",""ignore_case"":true},{""function"":""take_first""}],""name"":""flexible-extract""}]","true","0","3","0.9","[""</s>"",""Question:"",""<|im_end|>""]","gpqa","1","[{""metric"":""exact_match"",""aggregation"":""mean"",""ignore_case"":true,""higher_is_better"":true,""ignore_punctuation"":true}]","5","generate_until","def process_docs(dataset: datasets.Dataset) -> datasets.Dataset:
    def _process_doc(doc):
        choices = [
            preprocess(doc[""Incorrect Answer 1""]),
            preprocess(doc[""Incorrect Answer 2""]),
            preprocess(doc[""Incorrect Answer 3""]),
            preprocess(doc[""Correct Answer""]),
        ]

        random.shuffle(choices)
        correct_answer_index = choices.index(preprocess(doc[""Correct Answer""]))

        out_doc = {
            ""choice1"": choices[0],
            ""choice2"": choices[1],
            ""choice3"": choices[2],
            ""choice4"": choices[3],
            ""choices"": [choices[0], choices[1], choices[2], choices[3]],
            ""answer"": f""({chr(65 + correct_answer_index)})"",
        }
        return out_doc

    return dataset.map(_process_doc)
","1","false"," ","gpqa_main_generative_n_shot","train","train","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","157","070bcecbc68d","-","finished","","","","","","","","","","","","","","","","","","","gpqa_generative_n_shot","","","","","","gpqa_main_generative_n_shot","0.004464285714285714","0","0.0031531937104656623","0"
"GPQA,min_p=0,top_p=0.9,temperature=2,dainty-breeze-16","auto","[]","100000","cuda","true","0","2","0.9","","vllm","pretrained=mistralai/Mistral-7B-v0.1,dtype=auto","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","1234","1234","0","1234","","","","","","","","","","","","","","","","","","","","","","","","gpqa_main","Idavidrein/gpqa","answer","Question: {{Question}}
Choices:
(A) {{choice1}}
(B) {{choice2}}
(C) {{choice3}}
(D) {{choice4}}
Answer:","

","[{""name"":""strict-match"",""filter"":[{""regex_pattern"":""(?<=The answer is )(.*)(?=.)"",""function"":""regex""},{""function"":""take_first""}]},{""name"":""flexible-extract"",""filter"":[{""function"":""multi_choice_regex"",""ignore_case"":true,""group_select"":-1,""regex_pattern"":""(\\([A-Z]\\))"",""ignore_punctuation"":true},{""function"":""take_first""}]}]","true","0","2","0.9","[""</s>"",""Question:"",""<|im_end|>""]","gpqa","1","[{""ignore_punctuation"":true,""metric"":""exact_match"",""aggregation"":""mean"",""ignore_case"":true,""higher_is_better"":true}]","5","generate_until","def process_docs(dataset: datasets.Dataset) -> datasets.Dataset:
    def _process_doc(doc):
        choices = [
            preprocess(doc[""Incorrect Answer 1""]),
            preprocess(doc[""Incorrect Answer 2""]),
            preprocess(doc[""Incorrect Answer 3""]),
            preprocess(doc[""Correct Answer""]),
        ]

        random.shuffle(choices)
        correct_answer_index = choices.index(preprocess(doc[""Correct Answer""]))

        out_doc = {
            ""choice1"": choices[0],
            ""choice2"": choices[1],
            ""choice3"": choices[2],
            ""choice4"": choices[3],
            ""choices"": [choices[0], choices[1], choices[2], choices[3]],
            ""answer"": f""({chr(65 + correct_answer_index)})"",
        }
        return out_doc

    return dataset.map(_process_doc)
","1","false"," ","gpqa_main_generative_n_shot","train","train","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","154","070bcecbc68d","-","finished","","","","","","","","","","","","","","","","","","","gpqa_generative_n_shot","","","","","","gpqa_main_generative_n_shot","0.06473214285714286","0","0.011637889648776724","0"
"GPQA,min_p=0,top_p=0.9,temperature=1,gentle-sponge-15","auto","[]","100000","cuda","true","0","1","0.9","","vllm","pretrained=mistralai/Mistral-7B-v0.1,dtype=auto","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","1234","1234","0","1234","","","","","","","","","","","","","","","","","","","","","","","","gpqa_main","Idavidrein/gpqa","answer","Question: {{Question}}
Choices:
(A) {{choice1}}
(B) {{choice2}}
(C) {{choice3}}
(D) {{choice4}}
Answer:","

","[{""name"":""strict-match"",""filter"":[{""function"":""regex"",""regex_pattern"":""(?<=The answer is )(.*)(?=.)""},{""function"":""take_first""}]},{""name"":""flexible-extract"",""filter"":[{""function"":""multi_choice_regex"",""ignore_case"":true,""group_select"":-1,""regex_pattern"":""(\\([A-Z]\\))"",""ignore_punctuation"":true},{""function"":""take_first""}]}]","true","0","1","0.9","[""</s>"",""Question:"",""<|im_end|>""]","gpqa","1","[{""metric"":""exact_match"",""aggregation"":""mean"",""ignore_case"":true,""higher_is_better"":true,""ignore_punctuation"":true}]","5","generate_until","def process_docs(dataset: datasets.Dataset) -> datasets.Dataset:
    def _process_doc(doc):
        choices = [
            preprocess(doc[""Incorrect Answer 1""]),
            preprocess(doc[""Incorrect Answer 2""]),
            preprocess(doc[""Incorrect Answer 3""]),
            preprocess(doc[""Correct Answer""]),
        ]

        random.shuffle(choices)
        correct_answer_index = choices.index(preprocess(doc[""Correct Answer""]))

        out_doc = {
            ""choice1"": choices[0],
            ""choice2"": choices[1],
            ""choice3"": choices[2],
            ""choice4"": choices[3],
            ""choices"": [choices[0], choices[1], choices[2], choices[3]],
            ""answer"": f""({chr(65 + correct_answer_index)})"",
        }
        return out_doc

    return dataset.map(_process_doc)
","1","false"," ","gpqa_main_generative_n_shot","train","train","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","92","070bcecbc68d","-","finished","","","","","","","","","","","","","","","","","","","gpqa_generative_n_shot","","","","","","gpqa_main_generative_n_shot","0.25","0","0.02048079801297601","0"
"GPQA,min_p=0.1,top_p=1,temperature=3,fearless-voice-14","auto","[]","100000","cuda","true","0.1","3","1","","vllm","pretrained=mistralai/Mistral-7B-v0.1,dtype=auto","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","1234","1234","0","1234","","","","","","","","","","","","","","","","","","","","","","","","gpqa_main","Idavidrein/gpqa","answer","Question: {{Question}}
Choices:
(A) {{choice1}}
(B) {{choice2}}
(C) {{choice3}}
(D) {{choice4}}
Answer:","

","[{""name"":""strict-match"",""filter"":[{""function"":""regex"",""regex_pattern"":""(?<=The answer is )(.*)(?=.)""},{""function"":""take_first""}]},{""name"":""flexible-extract"",""filter"":[{""regex_pattern"":""(\\([A-Z]\\))"",""ignore_punctuation"":true,""function"":""multi_choice_regex"",""ignore_case"":true,""group_select"":-1},{""function"":""take_first""}]}]","true","0.1","3","1","[""</s>"",""Question:"",""<|im_end|>""]","gpqa","1","[{""ignore_case"":true,""higher_is_better"":true,""ignore_punctuation"":true,""metric"":""exact_match"",""aggregation"":""mean""}]","5","generate_until","def process_docs(dataset: datasets.Dataset) -> datasets.Dataset:
    def _process_doc(doc):
        choices = [
            preprocess(doc[""Incorrect Answer 1""]),
            preprocess(doc[""Incorrect Answer 2""]),
            preprocess(doc[""Incorrect Answer 3""]),
            preprocess(doc[""Correct Answer""]),
        ]

        random.shuffle(choices)
        correct_answer_index = choices.index(preprocess(doc[""Correct Answer""]))

        out_doc = {
            ""choice1"": choices[0],
            ""choice2"": choices[1],
            ""choice3"": choices[2],
            ""choice4"": choices[3],
            ""choices"": [choices[0], choices[1], choices[2], choices[3]],
            ""answer"": f""({chr(65 + correct_answer_index)})"",
        }
        return out_doc

    return dataset.map(_process_doc)
","1","false"," ","gpqa_main_generative_n_shot","train","train","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","120","070bcecbc68d","-","finished","","","","","","","","","","","","","","","","","","","gpqa_generative_n_shot","","","","","","gpqa_main_generative_n_shot","0.24553571428571427","0","0.02035742845448457","0"
"GPQA,min_p=0.1,top_p=1,temperature=2,zany-blaze-13","auto","[]","100000","cuda","true","0.1","2","1","","vllm","pretrained=mistralai/Mistral-7B-v0.1,dtype=auto","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","1234","1234","0","1234","","","","","","","","","","","","","","","","","","","","","","","","gpqa_main","Idavidrein/gpqa","answer","Question: {{Question}}
Choices:
(A) {{choice1}}
(B) {{choice2}}
(C) {{choice3}}
(D) {{choice4}}
Answer:","

","[{""name"":""strict-match"",""filter"":[{""function"":""regex"",""regex_pattern"":""(?<=The answer is )(.*)(?=.)""},{""function"":""take_first""}]},{""name"":""flexible-extract"",""filter"":[{""group_select"":-1,""regex_pattern"":""(\\([A-Z]\\))"",""ignore_punctuation"":true,""function"":""multi_choice_regex"",""ignore_case"":true},{""function"":""take_first""}]}]","true","0.1","2","1","[""</s>"",""Question:"",""<|im_end|>""]","gpqa","1","[{""aggregation"":""mean"",""ignore_case"":true,""higher_is_better"":true,""ignore_punctuation"":true,""metric"":""exact_match""}]","5","generate_until","def process_docs(dataset: datasets.Dataset) -> datasets.Dataset:
    def _process_doc(doc):
        choices = [
            preprocess(doc[""Incorrect Answer 1""]),
            preprocess(doc[""Incorrect Answer 2""]),
            preprocess(doc[""Incorrect Answer 3""]),
            preprocess(doc[""Correct Answer""]),
        ]

        random.shuffle(choices)
        correct_answer_index = choices.index(preprocess(doc[""Correct Answer""]))

        out_doc = {
            ""choice1"": choices[0],
            ""choice2"": choices[1],
            ""choice3"": choices[2],
            ""choice4"": choices[3],
            ""choices"": [choices[0], choices[1], choices[2], choices[3]],
            ""answer"": f""({chr(65 + correct_answer_index)})"",
        }
        return out_doc

    return dataset.map(_process_doc)
","1","false"," ","gpqa_main_generative_n_shot","train","train","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","95","070bcecbc68d","-","finished","","","","","","","","","","","","","","","","","","","gpqa_generative_n_shot","","","","","","gpqa_main_generative_n_shot","0.26339285714285715","0","0.0208336900165786","0"
"GPQA,min_p=0.1,top_p=1,temperature=1,peach-bird-12","auto","[]","100000","cuda","true","0.1","1","1","","vllm","pretrained=mistralai/Mistral-7B-v0.1,dtype=auto","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","1234","1234","0","1234","","","","","","","","","","","","","","","","","","","","","","","","gpqa_main","Idavidrein/gpqa","answer","Question: {{Question}}
Choices:
(A) {{choice1}}
(B) {{choice2}}
(C) {{choice3}}
(D) {{choice4}}
Answer:","

","[{""filter"":[{""function"":""regex"",""regex_pattern"":""(?<=The answer is )(.*)(?=.)""},{""function"":""take_first""}],""name"":""strict-match""},{""name"":""flexible-extract"",""filter"":[{""regex_pattern"":""(\\([A-Z]\\))"",""ignore_punctuation"":true,""function"":""multi_choice_regex"",""ignore_case"":true,""group_select"":-1},{""function"":""take_first""}]}]","true","0.1","1","1","[""</s>"",""Question:"",""<|im_end|>""]","gpqa","1","[{""ignore_punctuation"":true,""metric"":""exact_match"",""aggregation"":""mean"",""ignore_case"":true,""higher_is_better"":true}]","5","generate_until","def process_docs(dataset: datasets.Dataset) -> datasets.Dataset:
    def _process_doc(doc):
        choices = [
            preprocess(doc[""Incorrect Answer 1""]),
            preprocess(doc[""Incorrect Answer 2""]),
            preprocess(doc[""Incorrect Answer 3""]),
            preprocess(doc[""Correct Answer""]),
        ]

        random.shuffle(choices)
        correct_answer_index = choices.index(preprocess(doc[""Correct Answer""]))

        out_doc = {
            ""choice1"": choices[0],
            ""choice2"": choices[1],
            ""choice3"": choices[2],
            ""choice4"": choices[3],
            ""choices"": [choices[0], choices[1], choices[2], choices[3]],
            ""answer"": f""({chr(65 + correct_answer_index)})"",
        }
        return out_doc

    return dataset.map(_process_doc)
","1","false"," ","gpqa_main_generative_n_shot","train","train","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","91","070bcecbc68d","-","finished","","","","","","","","","","","","","","","","","","","gpqa_generative_n_shot","","","","","","gpqa_main_generative_n_shot","0.25892857142857145","0","0.020718879324472125","0"
"GPQA,min_p=0.1,top_p=1,temperature=0,warm-sun-11","auto","[]","100000","cuda","true","0.1","0","1","","vllm","pretrained=mistralai/Mistral-7B-v0.1,dtype=auto","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","1234","1234","0","1234","gpqa_main","Idavidrein/gpqa","answer","Question: {{Question}}
Choices:
(A) {{choice1}}
(B) {{choice2}}
(C) {{choice3}}
(D) {{choice4}}
Let's think step by step: ","

","[{""name"":""strict-match"",""filter"":[{""function"":""regex"",""regex_pattern"":""(?<=The answer is )(.*)(?=.)""},{""function"":""take_first""}]},{""name"":""flexible-extract"",""filter"":[{""ignore_case"":true,""group_select"":-1,""regex_pattern"":""(\\([A-Z]\\))"",""ignore_punctuation"":true,""function"":""multi_choice_regex""},{""function"":""take_first""}]}]","true","0.1","0","1","[""</s>""]","gpqa","1","[{""metric"":""exact_match"",""aggregation"":""mean"",""ignore_case"":true,""higher_is_better"":true,""ignore_punctuation"":true}]","5","generate_until","def process_docs(dataset: datasets.Dataset) -> datasets.Dataset:
    def _process_doc(doc):
        choices = [
            preprocess(doc[""Incorrect Answer 1""]),
            preprocess(doc[""Incorrect Answer 2""]),
            preprocess(doc[""Incorrect Answer 3""]),
            preprocess(doc[""Correct Answer""]),
        ]

        random.shuffle(choices)
        correct_answer_index = choices.index(preprocess(doc[""Correct Answer""]))

        out_doc = {
            ""choice1"": choices[0],
            ""choice2"": choices[1],
            ""choice3"": choices[2],
            ""choice4"": choices[3],
            ""choices"": [choices[0], choices[1], choices[2], choices[3]],
            ""answer"": f""({chr(65 + correct_answer_index)})"",
        }
        return out_doc

    return dataset.map(_process_doc)
","1","false"," ","gpqa_main_cot_n_shot","train","train","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","163","070bcecbc68d","-","finished","","","","","","","","","","","","","","","","","","","gpqa_generative_n_shot","gpqa_main_cot_n_shot","0.22767857142857145","0","0.0198338196436619","0","","","","",""
"GPQA,min_p=0,top_p=1,temperature=0,sparkling-tree-9","auto","[]","100000","cuda","true","0","0","1","","vllm","pretrained=mistralai/Mistral-7B-v0.1,dtype=auto","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","1234","1234","0","1234","","","","","","","","","","","","","","","","","","","","","","","","gpqa_main","Idavidrein/gpqa","answer","Question: {{Question}}
Choices:
(A) {{choice1}}
(B) {{choice2}}
(C) {{choice3}}
(D) {{choice4}}
Answer:","

","[{""name"":""strict-match"",""filter"":[{""function"":""regex"",""regex_pattern"":""(?<=The answer is )(.*)(?=.)""},{""function"":""take_first""}]},{""name"":""flexible-extract"",""filter"":[{""regex_pattern"":""(\\([A-Z]\\))"",""ignore_punctuation"":true,""function"":""multi_choice_regex"",""ignore_case"":true,""group_select"":-1},{""function"":""take_first""}]}]","true","0","0","1","[""</s>"",""Question:"",""<|im_end|>""]","gpqa","1","[{""metric"":""exact_match"",""aggregation"":""mean"",""ignore_case"":true,""higher_is_better"":true,""ignore_punctuation"":true}]","5","generate_until","def process_docs(dataset: datasets.Dataset) -> datasets.Dataset:
    def _process_doc(doc):
        choices = [
            preprocess(doc[""Incorrect Answer 1""]),
            preprocess(doc[""Incorrect Answer 2""]),
            preprocess(doc[""Incorrect Answer 3""]),
            preprocess(doc[""Correct Answer""]),
        ]

        random.shuffle(choices)
        correct_answer_index = choices.index(preprocess(doc[""Correct Answer""]))

        out_doc = {
            ""choice1"": choices[0],
            ""choice2"": choices[1],
            ""choice3"": choices[2],
            ""choice4"": choices[3],
            ""choices"": [choices[0], choices[1], choices[2], choices[3]],
            ""answer"": f""({chr(65 + correct_answer_index)})"",
        }
        return out_doc

    return dataset.map(_process_doc)
","1","false"," ","gpqa_main_generative_n_shot","train","train","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","89","070bcecbc68d","-","finished","","","","","","","","","","","","","","","","","","","gpqa_generative_n_shot","","","","","","gpqa_main_generative_n_shot","0.28348214285714285","0","0.021316828987262133","0"
